{
  "swagger": "2.0",
  "info": {
    "description": "<b>General:</b><br/> The user for the anonymous users is <b>anonymous</b> with which it's possible to create carts for anonymous users.<br/>The language of each response can be set via the url parameter <b>lang</b>. The currency can be set via <b>curr</b>. Default values/fallbacks apply when none of these parameters are set. <br/><br/>Most of the requests have a <b>fields</b> parameter which configures the fields in the reponse. In addition to the default setting <b>DEFAULT</b>, there are <b>BASIC</b> and <b>FULL</b>. Furthermore, a list of field can also be passed to configure the list of fields in the response (e.g. <b>field1,field2(BASIC),field3(FULL)</b>)",
    "version": "1.0.1",
    "title": "Hybris OCC API"
  },
  "host": "api-ccdev.fiskars.com",
  "basePath": "/rest/v2",
  "tags": [
    {
      "name": "adyen-notification-controller",
      "description": "Adyen Notification Controller"
    },
    {
      "name": "carts-controller",
      "description": "Carts Controller"
    },
    {
      "name": "catalogs-controller",
      "description": "Catalogs Controller"
    },
    {
      "name": "configuration-controller",
      "description": "Configuration Controller"
    },
    {
      "name": "coveo-products-test-controller",
      "description": "Coveo Products Test Controller"
    },
    {
      "name": "customer-groups-controller",
      "description": "Customer Groups Controller"
    },
    {
      "name": "default-controller",
      "description": "Default Controller"
    },
    {
      "name": "export-controller",
      "description": "Export Controller"
    },
    {
      "name": "feeds-controller",
      "description": "Feeds Controller"
    },
    {
      "name": "forgotten-passwords-controller",
      "description": "Forgotten Passwords Controller"
    },
    {
      "name": "give-x-controller",
      "description": "Give X Controller"
    },
    {
      "name": "i-paas-orders-test-controller",
      "description": "I Paas Orders Test Controller"
    },
    {
      "name": "login-controller",
      "description": "Login Controller"
    },
    {
      "name": "master-data-controller",
      "description": "Master Data Controller"
    },
    {
      "name": "miscs-controller",
      "description": "Miscs Controller"
    },
    {
      "name": "order-export-test-controller",
      "description": "Order Export Test Controller"
    },
    {
      "name": "orders-controller",
      "description": "Orders Controller"
    },
    {
      "name": "payment-integration-test-controller",
      "description": "Payment Integration Test Controller"
    },
    {
      "name": "permissions",
      "description": "Get permissions for principal"
    },
    {
      "name": "products-controller",
      "description": "Products Controller"
    },
    {
      "name": "promotions-controller",
      "description": "Promotions Controller"
    },
    {
      "name": "save-cart-controller",
      "description": "Save Cart Controller"
    },
    {
      "name": "solr-search-controller",
      "description": "Solr Search Controller"
    },
    {
      "name": "stores-controller",
      "description": "Stores Controller"
    },
    {
      "name": "users-controller",
      "description": "Users Controller"
    },
    {
      "name": "vouchers-controller",
      "description": "Vouchers Controller"
    },
    {
      "name": "wishlist-controller",
      "description": "Wishlist Controller"
    }
  ],
  "produces": [
    "application/xml",
    "application/json"
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "default-controller"
        ],
        "summary": "defaultRequest",
        "operationId": "defaultRequestUsingGET",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "head": {
        "tags": [
          "default-controller"
        ],
        "summary": "defaultRequest",
        "operationId": "defaultRequestUsingHEAD",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "default-controller"
        ],
        "summary": "defaultRequest",
        "operationId": "defaultRequestUsingPOST",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "put": {
        "tags": [
          "default-controller"
        ],
        "summary": "defaultRequest",
        "operationId": "defaultRequestUsingPUT",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "delete": {
        "tags": [
          "default-controller"
        ],
        "summary": "defaultRequest",
        "operationId": "defaultRequestUsingDELETE",
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "options": {
        "tags": [
          "default-controller"
        ],
        "summary": "defaultRequest",
        "operationId": "defaultRequestUsingOPTIONS",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "patch": {
        "tags": [
          "default-controller"
        ],
        "summary": "defaultRequest",
        "operationId": "defaultRequestUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/adyen/v6/notification/json": {
      "post": {
        "tags": [
          "adyen-notification-controller"
        ],
        "summary": "onReceive",
        "operationId": "onReceiveUsingPOST",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AdyenNotificationResponseWsDto",
              "originalRef": "AdyenNotificationResponseWsDto"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/addressfilters": {
      "get": {
        "tags": [
          "configuration-controller"
        ],
        "summary": "get address filters",
        "description": "Lists address filters",
        "operationId": "getAddressFilterUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "Country iso code",
            "required": true,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AddressFiltersWsDTO",
              "originalRef": "AddressFiltersWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/cardtypes": {
      "get": {
        "tags": [
          "miscs-controller"
        ],
        "summary": "get card types",
        "description": "Lists supported payment card types",
        "operationId": "getCardTypesUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CardTypeList",
              "originalRef": "CardTypeList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/catalogs": {
      "get": {
        "tags": [
          "catalogs-controller"
        ],
        "summary": "get catalogs",
        "description": "Returns all catalogs with versions defined for the base store",
        "operationId": "getCatalogsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CatalogList",
              "originalRef": "CatalogList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/catalogs/classificationAttributes": {
      "get": {
        "tags": [
          "catalogs-controller"
        ],
        "summary": "get classification attributes",
        "description": "Returns classification attributes base on catalog versions assigned to base site",
        "operationId": "getClassificationAttributesUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Classification language",
            "required": false,
            "type": "string"
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "When this parameter is set, only classification attributes modified after given time will be returned. This parameter should be in RFC-8601 format: 2019-01-01T00:00:00.000Z",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClassificationAttributeListWsDTO",
              "originalRef": "ClassificationAttributeListWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/catalogs/{catalogId}": {
      "get": {
        "tags": [
          "catalogs-controller"
        ],
        "summary": "get catalog",
        "description": "Returns a information about a catalog based on its ID, along with versions defined for the current base store",
        "operationId": "getCatalogUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Catalog identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Catalog",
              "originalRef": "Catalog"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}": {
      "get": {
        "tags": [
          "catalogs-controller"
        ],
        "summary": "get catalog version",
        "description": "Returns information about catalog version that exists for the current base store",
        "operationId": "getCatalogVersionUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Catalog identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "catalogVersionId",
            "in": "path",
            "description": "Catalog version identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CatalogVersion",
              "originalRef": "CatalogVersion"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}/categories/{categoryId}": {
      "get": {
        "tags": [
          "catalogs-controller"
        ],
        "summary": "get categories",
        "description": "Returns information about category that exists in a catalog version available for the current base store",
        "operationId": "getCategoriesUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Catalog identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "catalogVersionId",
            "in": "path",
            "description": "Catalog version identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Catalog identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "When this parameter is set, only category with given ID modified after given time will be returned. This parameter should be in RFC-8601 format: 2019-01-01T00:00:00.000Z",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/configuration": {
      "get": {
        "tags": [
          "configuration-controller"
        ],
        "summary": "site configuration",
        "description": "Provides the configuration for the given site..<b>Allowed only for trusted client </b>",
        "operationId": "siteConfigurationUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SiteConfigurationWsDto",
              "originalRef": "SiteConfigurationWsDto"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/coveo/products/push/source/{sourceId}/catalog": {
      "post": {
        "tags": [
          "coveo-products-test-controller"
        ],
        "summary": "push catalog to coveo",
        "description": "Push the whole catalog to Coveo. This interface is for testing purposes only. Catalog is fetched from the baseSiteId.",
        "operationId": "pushCatalogToCoveoUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceId",
            "in": "path",
            "description": "Source ID. Should map to the correct language!",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/coveo/products/push/source/{sourceId}/product/{productCode}": {
      "post": {
        "tags": [
          "coveo-products-test-controller"
        ],
        "summary": "push product to coveo",
        "description": "Push one single product to Coveo. This interface is for testing purposes only",
        "operationId": "pushProductToCoveoUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceId",
            "in": "path",
            "description": "Source ID. Should map to the correct language!",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CoveoProductData",
              "originalRef": "CoveoProductData"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/coveo/products/{productCode}": {
      "get": {
        "tags": [
          "coveo-products-test-controller"
        ],
        "summary": "get product",
        "description": "Returns product details in coveo format. This interface is for testing purposes only",
        "operationId": "getProductByCodeUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CoveoProductData",
              "originalRef": "CoveoProductData"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/currencies": {
      "get": {
        "tags": [
          "miscs-controller"
        ],
        "summary": "get currencies",
        "description": "Lists all available currencies (all usable currencies for the current store).If the list of currencies for stores is empty, a list of all currencies available in the system is returned.",
        "operationId": "getCurrenciesUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CurrencyList",
              "originalRef": "CurrencyList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/customergroups": {
      "get": {
        "tags": [
          "customer-groups-controller"
        ],
        "summary": "get all customer groups",
        "description": "Returns all customer groups that are direct subgroups of a customergroup <br /><br /> <b>Permitted only for customer managers</b>",
        "operationId": "getAllCustomerGroupsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "Current page number (starts with 0)",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "BASIC",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of customer groups returned in one page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserGroupList",
              "originalRef": "UserGroupList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "customer-groups-controller"
        ],
        "summary": "create new customer group body",
        "description": "Creates new customer group - direct subgroup of customergroup. <br /><br /> <b>Requires CUSTOMERMANAGERGROUP role</b>",
        "operationId": "createNewCustomerGroupUsingPOST",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "userGroup",
            "description": "User group object with id and name. Requires uid, name, members.uid",
            "required": true,
            "schema": {
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/customergroups/{groupId}": {
      "get": {
        "tags": [
          "customer-groups-controller"
        ],
        "summary": "get customer group",
        "description": "Returns a customer group with a specific groupId <br /><br /> <b>Permitted only for customer managers</b>",
        "operationId": "getCustomerGroupUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "BASIC",
            "allowEmptyValue": false
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identificator",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/customergroups/{groupId}/members": {
      "put": {
        "tags": [
          "customer-groups-controller"
        ],
        "summary": "set user list for customer group body",
        "description": "Sets members for a user group. The list of existing members is overwritten with a new one <br /><br /> <b>Permitted only for customer managers</b>",
        "operationId": "setUserListForCustomerGroupUsingPUT",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identificator",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "members",
            "description": "members",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberList",
              "originalRef": "MemberList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "patch": {
        "tags": [
          "customer-groups-controller"
        ],
        "summary": "assign user to customer group",
        "description": "Assigns user(s) to a customer group <br /><br /> <b>Permitted only for customer managers</b>",
        "operationId": "assignUserToCustomerGroupUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "members",
            "in": "query",
            "description": "List of users ids to assign to customer group. List should be in form: members=uid1&members=uid2...",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/customergroups/{groupId}/members/{userId}": {
      "delete": {
        "tags": [
          "customer-groups-controller"
        ],
        "summary": "remove users from customer group",
        "description": "Removes user from a customer group <br /><br /> <b>Permitted only for customer managers</b>",
        "operationId": "removeUsersFromCustomerGroupUsingDELETE",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identificator",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/deliverycountries": {
      "get": {
        "tags": [
          "miscs-controller"
        ],
        "summary": "get delivery countries",
        "description": "Lists all supported delivery countries for the current store. The list is sorted alphabetically.",
        "operationId": "getDeliveryCountriesUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CountryList",
              "originalRef": "CountryList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/deliverymodes": {
      "get": {
        "tags": [
          "miscs-controller"
        ],
        "summary": "get delivery modes",
        "description": "Returns all delivery modes supported for the current base site, currency and given country and optionally also region.",
        "operationId": "getDeliveryModesUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Isocode of the country",
            "required": true,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "region",
            "in": "query",
            "description": "Optional: isocode of the region",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeliveryModeList",
              "originalRef": "DeliveryModeList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/deliveryregions": {
      "get": {
        "tags": [
          "miscs-controller"
        ],
        "summary": "get delivery regions",
        "description": "Lists all delivery regions for a given country, blacklisted regions are excluded. The list is sorted alphabetically.",
        "operationId": "getDeliveryRegionsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Isocode of the country",
            "required": true,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RegionListWsDTO",
              "originalRef": "RegionListWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/export/prices": {
      "get": {
        "tags": [
          "export-controller"
        ],
        "summary": "export prices",
        "description": "Used for prices export. Depending on the timestamp parameter (Format: 2019-01-01T00:00:00.000Z), it can return all prices or only prices modified after the given time. <br /> <br /><b>Please take a look at the documentation of the PriceWsDTO.</b><br /> <b>Allowed only for trusted client</b>",
        "operationId": "exportPricesUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "When this parameter is set, only prices modified after given time will be returned.This parameter should be in RFC-8601 format: 2019-01-01T00:00:00.000Z",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductPriceListWsDTO",
              "originalRef": "ProductPriceListWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/export/products": {
      "get": {
        "tags": [
          "export-controller"
        ],
        "summary": "export products",
        "description": "Used for product export. Depending on the timestamp parameter (Format: 2019-01-01T00:00:00.000Z), it can return all products or only products modified after the given time. <br /> <br /><b>Please take a look at the documentation of the ProductWsDTO.</b><br /> <b>Allowed only for trusted client</b>",
        "operationId": "exportProductsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "catalog",
            "in": "query",
            "description": "Catalog from which get products. Must be provided along with version",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "EXPORT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page",
            "required": false,
            "type": "integer",
            "default": 2147483647,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "When this parameter is set, only products modified after given time will be returned.This parameter should be in RFC-8601 format: 2019-01-01T00:00:00.000Z",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "version",
            "in": "query",
            "description": "Catalog version. Must be provided along with catalog",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductList",
              "originalRef": "ProductList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/export/products/{productCode}": {
      "get": {
        "tags": [
          "export-controller"
        ],
        "summary": "export product",
        "description": "Used for product export. <br /><b>Please take a look at the documentation of the ProductWsDTO.</b><br /> <b>Allowed only for trusted client</b>",
        "operationId": "exportProductUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "EXPORT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/export/serviceProductPrices": {
      "get": {
        "tags": [
          "export-controller"
        ],
        "summary": "export service product prices",
        "description": "Used for service prices export. Depending on the timestamp parameter (Format: 2019-01-01T00:00:00.000Z), it can return all prices or only prices modified after the given time. <br /><br /> <b>Allowed only for trusted client</b>",
        "operationId": "exportServicePricesUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "When this parameter is set, only prices modified after given time will be returned.This parameter should be in RFC-8601 format: 2019-01-01T00:00:00.000Z",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceProductPriceListWsDTO",
              "originalRef": "ServiceProductPriceListWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/export/serviceProducts": {
      "get": {
        "tags": [
          "export-controller"
        ],
        "summary": "export service products",
        "description": "Used for service product export. Depending on the timestamp parameter (Format: 2019-01-01T00:00:00.000Z), it can return all service products or only service products modified after the given time. <br /><br /> <b>Allowed only for trusted client</b>",
        "operationId": "exportServiceProductsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "catalog",
            "in": "query",
            "description": "Catalog from which get products. Must be provided along with version",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page",
            "required": false,
            "type": "integer",
            "default": 2147483647,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "When this parameter is set, only products modified after given time will be returned.This parameter should be in RFC-8601 format: 2019-01-01T00:00:00.000Z",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "version",
            "in": "query",
            "description": "Catalog version. Must be provided along with catalog",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceProductListWsDto",
              "originalRef": "ServiceProductListWsDto"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/export/serviceProducts/{serviceProductCode}": {
      "get": {
        "tags": [
          "export-controller"
        ],
        "summary": "export service product",
        "description": "Used for service product export. <br /> <b>Allowed only for trusted client</b>",
        "operationId": "exportServiceProductUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceProductCode",
            "in": "path",
            "description": "Service product identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceProductWsDto",
              "originalRef": "ServiceProductWsDto"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/feeds/orders/statusfeed": {
      "get": {
        "tags": [
          "feeds-controller"
        ],
        "summary": "order status feed",
        "description": "Returns the orders the status has changed for. Returns only the elements from the current baseSite, updated after the provided timestamp (Format: 2019-01-01T00:00:00.000Z). <br /><br /> <b>Allowed only for trusted client</b>",
        "operationId": "orderStatusFeedUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "Only items newer than the given parameter are retrieved. This parameter should be in RFC-8601 format: 2019-01-01T00:00:00.000Z",
            "required": true,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderStatusUpdateElementList",
              "originalRef": "OrderStatusUpdateElementList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/forgottenpasswordtokens": {
      "post": {
        "tags": [
          "forgotten-passwords-controller"
        ],
        "summary": "restore password",
        "description": "Generates a token to restore customer's forgotten password <br /><br /> <b>Allowed only for client or trusted client</b>",
        "operationId": "restorePasswordUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "formData",
            "description": "Customer's user id. Customer user id is case insensitive",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/givex/balanceCheck": {
      "post": {
        "tags": [
          "give-x-controller"
        ],
        "summary": "GiveX digital gift card balance lookup",
        "description": "Returns balance details of a GiveX digital gift card. <br /><br /><b>Permitted only for trusted client</b>",
        "operationId": "getSecureBalanceCheckUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site id",
            "required": true,
            "type": "string"
          },
          {
            "name": "cardNumber",
            "in": "formData",
            "description": "ISO serial (card number)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": true,
            "type": "string",
            "default": "BASIC",
            "allowEmptyValue": false
          },
          {
            "name": "securityCode",
            "in": "formData",
            "description": "Security code (PIN number)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GiveXCardBalanceWsDTO",
              "originalRef": "GiveXCardBalanceWsDTO"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/languages": {
      "get": {
        "tags": [
          "miscs-controller"
        ],
        "summary": "get languages",
        "description": "Lists all available languages (all languages used for a particular store). If the list of languages for a base store is empty, a list of all languages available in the system will be returned",
        "operationId": "getLanguagesUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LanguageList",
              "originalRef": "LanguageList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/legalEntityDetails": {
      "get": {
        "tags": [
          "configuration-controller"
        ],
        "summary": "legal entity details",
        "description": "Provides detailed information about the legal entity assigned to the current baseStore<b>Allowed only for trusted client </b>",
        "operationId": "legalEntityDetailsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LegalEntityDetailsWsDTO",
              "originalRef": "LegalEntityDetailsWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/login/setAccount": {
      "post": {
        "tags": [
          "login-controller"
        ],
        "summary": "Set account",
        "description": "Create the account if doesn't exist and set the user group. Leave User Group empty to remove any User Group.<br />",
        "operationId": "setAccountUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "userGroup",
            "in": "formData",
            "description": "User Group ID",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "formData",
            "description": "User ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Price",
              "originalRef": "Price"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/masterdata/brands": {
      "get": {
        "tags": [
          "master-data-controller"
        ],
        "summary": "export brands",
        "description": "Used for brand export.<b>Allowed only for trusted client</b>",
        "operationId": "exportBrandsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BrandListWsDTO",
              "originalRef": "BrandListWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/masterdata/collections": {
      "get": {
        "tags": [
          "master-data-controller"
        ],
        "summary": "export collections",
        "description": "Used for collection export.<b>Allowed only for trusted client</b>",
        "operationId": "exportCollectionsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "When this parameter is set, only collections modified after given time will be returned.This parameter should be in RFC-8601 format: 2019-01-01T00:00:00.000Z",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CollectionListWsDTO",
              "originalRef": "CollectionListWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/masterdata/colors": {
      "get": {
        "tags": [
          "master-data-controller"
        ],
        "summary": "export color",
        "description": "Used for color export.<b>Allowed only for trusted client</b>",
        "operationId": "exportColorsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ColorListWsDTO",
              "originalRef": "ColorListWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/masterdata/designers": {
      "get": {
        "tags": [
          "master-data-controller"
        ],
        "summary": "export designers",
        "description": "Used for designer export.<b>Allowed only for trusted client</b>",
        "operationId": "exportDesignersUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DesignerListWsDTO",
              "originalRef": "DesignerListWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/masterdata/fontoptions": {
      "get": {
        "tags": [
          "master-data-controller"
        ],
        "summary": "export font options",
        "description": "Used for font options export.<b>Allowed only for trusted client</b>",
        "operationId": "exportFontOptionsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FontOptionListWsDTO",
              "originalRef": "FontOptionListWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/masterdata/iconoptions": {
      "get": {
        "tags": [
          "master-data-controller"
        ],
        "summary": "export font options",
        "description": "Used for icon options export.<b>Allowed only for trusted client</b>",
        "operationId": "exportIconOptionsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IconOptionListWsDTO",
              "originalRef": "IconOptionListWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/masterdata/materials": {
      "get": {
        "tags": [
          "master-data-controller"
        ],
        "summary": "export materials",
        "description": "Used for collection export.<b>Allowed only for trusted client</b>",
        "operationId": "exportMaterialsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MaterialListWsDTO",
              "originalRef": "MaterialListWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/masterdata/productcares": {
      "get": {
        "tags": [
          "master-data-controller"
        ],
        "summary": "export product cares",
        "description": "Used for product care export.<b>Allowed only for trusted client</b>",
        "operationId": "exportProductCaresUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductCareListWsDTO",
              "originalRef": "ProductCareListWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/masterdata/restrictedzipcodes": {
      "get": {
        "tags": [
          "master-data-controller"
        ],
        "summary": "export restricted zip codes",
        "description": "Used for restricted zip code export.<b>Allowed only for trusted client</b>",
        "operationId": "exportRestrictedZipCodesUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RestrictedZipCodeListWsDTO",
              "originalRef": "RestrictedZipCodeListWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/masterdata/simplifiedcolors": {
      "get": {
        "tags": [
          "master-data-controller"
        ],
        "summary": "export simplified colors",
        "description": "Used for simplified color export.<b>Allowed only for trusted client</b>",
        "operationId": "exportSimplifiedColorsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimplifiedColorListWsDTO",
              "originalRef": "SimplifiedColorListWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/orders/concessionStore": {
      "get": {
        "tags": [
          "orders-controller"
        ],
        "summary": "get orders for concession store",
        "description": "Returns order history data for all orders placed from the specific point of service.",
        "operationId": "getOrdersForConcessionStoreUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested. ATTENTION: in Hybris 1808, the <b>first page is 0</b>",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderedInStore",
            "in": "query",
            "description": "Point of Service from which the order has been placed",
            "required": true,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "receiptNumber",
            "in": "query",
            "description": "Filters orders by given receipt number",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the return results. Possible options are byTotalPriceASC, byTotalPriceDESC, byStatusASC, byStatusDESC, byDateASC, byDateDESC",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Statuses Filters only certain order statuses. It means: statuses=CANCELLED,CHECKED_VALID would only return orders with status CANCELLED or CHECKED_VALID",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderHistoryListWsDTO",
              "originalRef": "OrderHistoryListWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/orders/concessionStore/order/{code}": {
      "get": {
        "tags": [
          "orders-controller"
        ],
        "summary": "get order for concession store by order number",
        "description": "Returns order history detail data for given oder code of specified point of service.",
        "operationId": "getOrderForConcessionStoreAndCodeUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Order code",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderedInStore",
            "in": "query",
            "description": "Point of Service from which the order has been placed",
            "required": true,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderHistoryWsDTO",
              "originalRef": "OrderHistoryWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/orders/{code}": {
      "get": {
        "tags": [
          "orders-controller"
        ],
        "summary": "get order",
        "description": "Returns details of a specific order based on order GUID (Globally Unique Identifier) or order CODE. The response contains a detailed order information <br /><br /> <b>Allowed only for trusted client</b>",
        "operationId": "getOrderUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Order GUID (Globally Unique Identifier) or order CODE",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Order",
              "originalRef": "Order"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/orders/{code}/authorizationInfo": {
      "get": {
        "tags": [
          "orders-controller"
        ],
        "summary": "get authorization status of an order",
        "description": "Returns if order is already authorized or waiting for authorization",
        "operationId": "getOrderAuthorizationInfoUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Order CODE",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderAuthorizationWsDTO",
              "originalRef": "OrderAuthorizationWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/paymentCountries": {
      "get": {
        "tags": [
          "miscs-controller"
        ],
        "summary": "get Payment Countries",
        "description": "Lists all available payment countries for the current store. The list is sorted alphabetically.",
        "operationId": "getPaymentCountriesUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CountryList",
              "originalRef": "CountryList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/products/expressupdate": {
      "get": {
        "tags": [
          "products-controller"
        ],
        "summary": "express update",
        "description": "Returns products added to the express update feed. Returns only elements updated after the provided timestamp (Format: 2019-01-01T00:00:00.000Z). The queue is cleared using a defined cronjob.<br /><br /><b>Permitted only for trusted client</b>",
        "operationId": "expressUpdateUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "catalog",
            "in": "query",
            "description": "Only products from this catalog are returned. Format: <b>catalogId:catalogVersion</b>",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "Only items newer than the given parameter are retrieved from the queue. This parameter should be in RFC-8601 format: 2019-01-01T00:00:00.000Z",
            "required": true,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductExpressUpdateElementList",
              "originalRef": "ProductExpressUpdateElementList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/products/search": {
      "get": {
        "tags": [
          "products-controller"
        ],
        "summary": "search products",
        "description": "Returns a list of products and additional data such as: available facets, available sorting and pagination options. It can include spelling suggestions.To make spelling suggestions work you need to: <ul><li>Make sure enableSpellCheck on the SearchQuery is set to true. By default it should be already set to true.</li><li>Have indexed properties configured to be used for spellchecking.</li></ul>",
        "operationId": "searchProductsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "query",
            "in": "query",
            "description": "Serialized query, free text search, facets. The format of a serialized query:<b>freeTextSearch:sort:facetKey1:facetValue1:facetKey2:facetValue2</b>",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the display search results",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductSearchPage",
              "originalRef": "ProductSearchPage"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "head": {
        "tags": [
          "products-controller"
        ],
        "summary": "count search products",
        "description": "Returns header with total number of products satisfying a query. It doesn't return HTTP body.",
        "operationId": "countSearchProductsUsingHEAD",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Serialized query, free text search, facets. The format of a serialized query:<b>freeTextSearch:sort:facetKey1:facetValue1:facetKey2:facetValue2</b>",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/products/stocks": {
      "post": {
        "tags": [
          "products-controller"
        ],
        "summary": "fetch stock data",
        "description": "Returns stock level for products in a particular store",
        "operationId": "getStockDataForProductsInStoreUsingPOST",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "productCodesWsDTO",
            "description": "productCodesWsDTO",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductCodesWsDTO",
              "originalRef": "ProductCodesWsDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CrmStockListWsDTO",
              "originalRef": "CrmStockListWsDTO"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/products/suggestions": {
      "get": {
        "tags": [
          "products-controller"
        ],
        "summary": "get suggestions",
        "description": "Returns a list of all available suggestions related to a given term and limits the results to a specific value of the max parameter.",
        "operationId": "getSuggestionsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "max",
            "in": "query",
            "description": "Specifies the limit of results",
            "required": true,
            "type": "integer",
            "default": 10,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "term",
            "in": "query",
            "description": "Specified term",
            "required": true,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SuggestionList",
              "originalRef": "SuggestionList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/products/{productCode}": {
      "get": {
        "tags": [
          "products-controller"
        ],
        "summary": "get product",
        "description": "Returns details of a single product according to a product code",
        "operationId": "getProductByCodeUsingGET_1",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "pointOfService",
            "in": "query",
            "description": "Point Of Service",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User ID",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/products/{productCode}/references": {
      "get": {
        "tags": [
          "products-controller"
        ],
        "summary": "export product references",
        "description": "Returns references for a product with a given product code. Reference type specifies which references to return <br /><br /><b>Permitted only for trusted client</b>",
        "operationId": "exportProductReferencesUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Maximum size of returned results",
            "required": false,
            "type": "integer",
            "default": 2147483647,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "referenceType",
            "in": "query",
            "description": "Reference type according to enum ProductReferenceTypeEnum",
            "required": true,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductReferenceList",
              "originalRef": "ProductReferenceList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/products/{productCode}/reviews": {
      "get": {
        "tags": [
          "products-controller"
        ],
        "summary": "get product reviews",
        "description": "Returns the reviews for a product with a given product code",
        "operationId": "getProductReviewsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "languageIsocode",
            "in": "query",
            "description": "Reviews of this language will be delivered. If language is not defined, all reviews will be delivered",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "ratingFilter",
            "in": "query",
            "description": "Deliver only reviews with specified rating",
            "required": false,
            "type": "number",
            "format": "double",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReviewList",
              "originalRef": "ReviewList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/products/{productCode}/reviews/users/{userId}": {
      "post": {
        "tags": [
          "products-controller"
        ],
        "summary": "create review",
        "description": "Creates a new customer review as current user or as an anonymous user if user is not logged in.",
        "operationId": "createReviewUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alias",
            "in": "formData",
            "description": "Alias",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "comment",
            "in": "formData",
            "description": "Comment",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "headline",
            "in": "formData",
            "description": "Headline",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Review language",
            "required": false,
            "type": "string"
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "rating",
            "in": "formData",
            "description": "Rating, between 1 and 5 ",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Review",
              "originalRef": "Review"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/products/{productCode}/stock": {
      "get": {
        "tags": [
          "products-controller"
        ],
        "summary": "search product stock by location",
        "description": "Returns product's stock levels sorted by distance from specific location passed by free-text parameter or longitude and latitude parameters. The following two sets of parameters are available: <ul><li>location (required), currentPage (optional), pageSize (optional) or</li><li>longitude (required), latitude (required), currentPage (optional), pageSize(optional).</li></ul>",
        "operationId": "searchProductStockByLocationUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Latitude location parameter",
            "required": false,
            "type": "number",
            "format": "double",
            "allowEmptyValue": false
          },
          {
            "name": "location",
            "in": "query",
            "description": "Free-text location",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Longitude location parameter",
            "required": false,
            "type": "number",
            "format": "double",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StoreFinderStockSearchPage",
              "originalRef": "StoreFinderStockSearchPage"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "head": {
        "tags": [
          "products-controller"
        ],
        "summary": "count search product stock by location",
        "description": "Returns header with a total number of product's stock levels. It does not return the HTTP body. The following two sets of parameters are available: <ul><li>location (required) or</li><li>longitude (required), latitude (required).</li></ul>",
        "operationId": "countSearchProductStockByLocationUsingHEAD",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Latitude location parameter",
            "required": false,
            "type": "number",
            "format": "double",
            "allowEmptyValue": false
          },
          {
            "name": "location",
            "in": "query",
            "description": "Free-text location",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Longitude location parameter",
            "required": false,
            "type": "number",
            "format": "double",
            "allowEmptyValue": false
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/products/{productCode}/stock/{storeName}": {
      "get": {
        "tags": [
          "products-controller"
        ],
        "summary": "get stock data",
        "description": "Returns product's stock level for a particular store (POS)",
        "operationId": "getStockDataUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeName",
            "in": "path",
            "description": "Store name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Stock",
              "originalRef": "Stock"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/products/{productCode}/volatile": {
      "get": {
        "tags": [
          "products-controller"
        ],
        "summary": "get volatile product data",
        "description": "Returns price and cross out price of a single product",
        "operationId": "getProductByCodeVolatileUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeStockLevel",
            "in": "query",
            "description": "Include stock level",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User ID",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/promotions": {
      "get": {
        "tags": [
          "promotions-controller"
        ],
        "summary": "get promotions",
        "description": "Returns promotions defined for a current base site. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine <br/><br/><b>Permitted only for trusted client</b>",
        "operationId": "getPromotionsUsingGET_1",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "BASIC",
            "allowEmptyValue": false
          },
          {
            "name": "promotionGroup",
            "in": "query",
            "description": "Only promotions from this group are returned",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "type",
            "in": "query",
            "description": "Defines what type of promotions should be returned. Values supported for that parameter are:<ul><li> all: All available promotions are returned</li><li> product: Only product promotions are returned</li><li> order: Only order promotions are returned</li></ul>",
            "required": true,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PromotionList",
              "originalRef": "PromotionList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": true
      }
    },
    "/{baseSiteId}/promotions/{code}": {
      "get": {
        "tags": [
          "promotions-controller"
        ],
        "summary": "get promotion by code",
        "description": "Returns details of a single promotion specified by a promotion code. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine<br/><br/><b>Permitted only for trusted client</b>",
        "operationId": "getPromotionByCodeUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Promotion identifier (code)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "BASIC",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Promotion",
              "originalRef": "Promotion"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": true
      }
    },
    "/{baseSiteId}/regions": {
      "get": {
        "tags": [
          "miscs-controller"
        ],
        "summary": "get regions",
        "description": "Returns all regions for given country.",
        "operationId": "getRegionsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Isocode of the country",
            "required": true,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RegionListWsDTO",
              "originalRef": "RegionListWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/solrSearch": {
      "get": {
        "tags": [
          "solr-search-controller"
        ],
        "summary": "solr search",
        "description": "Used for searching and filtering products via solr",
        "operationId": "getSolrSearchResultUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "brand",
            "in": "query",
            "description": "Brand name",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "collection",
            "in": "query",
            "description": "Collection name",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "erpPlcStatus",
            "in": "query",
            "description": "ERP Status code",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language - this parameter is used only for testing purposes",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page - page numbers go from 0",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "required": false,
            "type": "integer",
            "default": 2147483647,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pointOfService",
            "in": "query",
            "description": "Point Of Service",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "searchParameter",
            "in": "query",
            "description": "Search parameter",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SolrSearchResultWsDto",
              "originalRef": "SolrSearchResultWsDto"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/stores": {
      "get": {
        "tags": [
          "stores-controller"
        ],
        "summary": "location search",
        "description": "Lists all store locations that are near the location specified in a query or based on latitude and longitude",
        "operationId": "locationSearchUsingGET",
        "parameters": [
          {
            "name": "accuracy",
            "in": "query",
            "description": "Accuracy in meters",
            "required": false,
            "type": "number",
            "default": 0,
            "format": "double",
            "allowEmptyValue": false
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Coordinate that specifies the north-south position of a point on the Earth's surface",
            "required": false,
            "type": "number",
            "format": "double",
            "allowEmptyValue": false
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Coordinate that specifies the east-west position of a point on the Earth's surface",
            "required": false,
            "type": "number",
            "format": "double",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "query",
            "in": "query",
            "description": "Location in natural language i.e. city or country",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "radius",
            "in": "query",
            "description": "Radius in meters. Max value: 40075000.0 (Earth's perimeter)",
            "required": false,
            "type": "number",
            "default": 100000,
            "format": "double",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the return results",
            "required": false,
            "type": "string",
            "default": "asc",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StoreFinderSearchPage",
              "originalRef": "StoreFinderSearchPage"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "head": {
        "tags": [
          "stores-controller"
        ],
        "summary": "count location search",
        "description": "Returns header with the number of all store locations that are near the location specified in a query, or based on latitude and longitude",
        "operationId": "countLocationSearchUsingHEAD",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accuracy",
            "in": "query",
            "description": "Accuracy in meters",
            "required": false,
            "type": "number",
            "default": 0,
            "format": "double",
            "allowEmptyValue": false
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Coordinate that specifies the north-south position of a point on the Earth's surface",
            "required": false,
            "type": "number",
            "format": "double",
            "allowEmptyValue": false
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Coordinate that specifies the east-west position of a point on the Earth's surface",
            "required": false,
            "type": "number",
            "format": "double",
            "allowEmptyValue": false
          },
          {
            "name": "query",
            "in": "query",
            "description": "Location in natural language i.e. city or country",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "radius",
            "in": "query",
            "description": "Radius in meters. Max value: 40075000.0 (Earth's perimeter)",
            "required": false,
            "type": "number",
            "default": 100000,
            "format": "double",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/stores/{storeId}": {
      "get": {
        "tags": [
          "stores-controller"
        ],
        "summary": "location details",
        "description": "Returns store location based on its unique name",
        "operationId": "locationDetailsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "storeId",
            "in": "path",
            "description": "Store identifier (currently store name)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PointOfService",
              "originalRef": "PointOfService"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/stores/{storeId}/address": {
      "get": {
        "tags": [
          "stores-controller"
        ],
        "summary": "location address details",
        "description": "Returns store address based on its unique name",
        "operationId": "getStoreAddressUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "storeId",
            "in": "path",
            "description": "Store identifier (currently store name)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PointOfServiceList",
              "originalRef": "PointOfServiceList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/export/order": {
      "post": {
        "tags": [
          "order-export-test-controller"
        ],
        "summary": "accepts order export",
        "description": "<b>For testing purposes only.</b>",
        "operationId": "authorizeExistingOrderUsingPOST",
        "consumes": [
          "application/xml"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/export/productMetadata": {
      "post": {
        "tags": [
          "order-export-test-controller"
        ],
        "summary": "accepts order export",
        "description": "<b>For testing purposes only.</b>",
        "operationId": "exportProductMetadataUsingPOST",
        "consumes": [
          "application/xml"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/ipaas/orders/{orderCode}": {
      "get": {
        "tags": [
          "i-paas-orders-test-controller"
        ],
        "summary": "get order",
        "description": "Returns order details. This interface is for testing purposes only",
        "operationId": "getOrderByCodeUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderCode",
            "in": "path",
            "description": "Order code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderDto",
              "originalRef": "OrderDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/ipaas/returns/{orderCode}/{returnCode}": {
      "get": {
        "tags": [
          "i-paas-orders-test-controller"
        ],
        "summary": "get order",
        "description": "Returns order details. This interface is for testing purposes only",
        "operationId": "getReturnByOrderCodeAndReturnCodeUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderCode",
            "in": "path",
            "description": "Order code",
            "required": true,
            "type": "string"
          },
          {
            "name": "returnCode",
            "in": "path",
            "description": "Return code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderDto",
              "originalRef": "OrderDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/payment/adjustauthorize": {
      "get": {
        "tags": [
          "payment-integration-test-controller"
        ],
        "summary": "adjusts authorization",
        "description": "<b>For testing purposes only.</b> Adjustes the authorization for the given reference with the set amount and currency.",
        "operationId": "adjustAuthorizeUsingGET",
        "parameters": [
          {
            "name": "amount",
            "in": "query",
            "description": "amount",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency",
            "in": "query",
            "description": "currency",
            "required": false,
            "type": "string"
          },
          {
            "name": "pspReference",
            "in": "query",
            "description": "pspReference",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FiskarsModificationResult",
              "originalRef": "FiskarsModificationResult"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/payment/authorize/order": {
      "get": {
        "tags": [
          "payment-integration-test-controller"
        ],
        "summary": "authorizes a existing order",
        "description": "<b>For testing purposes only.</b> The order needs to exist in hybris.",
        "operationId": "authorizeExistingOrderUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cseToken",
            "in": "query",
            "description": "cseToken",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderCode",
            "in": "query",
            "description": "orderCode",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaymentResult",
              "originalRef": "PaymentResult"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/payment/authorize/reference": {
      "get": {
        "tags": [
          "payment-integration-test-controller"
        ],
        "summary": "creates an authorization",
        "description": "<b>For testing purposes only.</b> Creates an authorization for the given reference with the set amount and currency.",
        "operationId": "authorizeReferenceUsingGET",
        "parameters": [
          {
            "name": "amount",
            "in": "query",
            "description": "amount",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cseToken",
            "in": "query",
            "description": "cseToken",
            "required": false,
            "type": "string"
          },
          {
            "name": "currency",
            "in": "query",
            "description": "currency",
            "required": false,
            "type": "string"
          },
          {
            "name": "reference",
            "in": "query",
            "description": "reference",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaymentResult",
              "originalRef": "PaymentResult"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/payment/authorize/reference/creditCardData": {
      "get": {
        "tags": [
          "payment-integration-test-controller"
        ],
        "summary": "creates an authorization",
        "description": "<b>For testing purposes only.</b> Creates an authorization for the given reference with the set amount and currency.",
        "operationId": "authorizeReferenceWithCreditCardDataUsingGET",
        "parameters": [
          {
            "name": "amount",
            "in": "query",
            "description": "amount",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cardHolder",
            "in": "query",
            "description": "cardHolder",
            "required": false,
            "type": "string"
          },
          {
            "name": "cardNumber",
            "in": "query",
            "description": "cardNumber",
            "required": false,
            "type": "string"
          },
          {
            "name": "currency",
            "in": "query",
            "description": "currency",
            "required": false,
            "type": "string"
          },
          {
            "name": "cvc",
            "in": "query",
            "description": "cvc",
            "required": false,
            "type": "string"
          },
          {
            "name": "expiryMonth",
            "in": "query",
            "description": "expiryMonth",
            "required": false,
            "type": "string"
          },
          {
            "name": "expiryYear",
            "in": "query",
            "description": "expiryYear",
            "required": false,
            "type": "string"
          },
          {
            "name": "reference",
            "in": "query",
            "description": "reference",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaymentResult",
              "originalRef": "PaymentResult"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/payment/authorize/users/{userId}/referenceLocalDev/{orderCode}": {
      "get": {
        "tags": [
          "payment-integration-test-controller"
        ],
        "summary": "creates an authorization",
        "description": "<b>For testing purposes only.</b> Creates an authorization for the given order.",
        "operationId": "authorizeReferenceLocalDevUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderCode",
            "in": "path",
            "description": "Order code",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/payment/cancel": {
      "get": {
        "tags": [
          "payment-integration-test-controller"
        ],
        "summary": "cancel",
        "description": "<b>For testing purposes only.</b> Cancel the (outstanding) authorization.",
        "operationId": "cancelUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "pspReference",
            "in": "query",
            "description": "pspReference",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModificationResult",
              "originalRef": "ModificationResult"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/payment/cancelOrRefund": {
      "get": {
        "tags": [
          "payment-integration-test-controller"
        ],
        "summary": "cancel or refunds",
        "description": "<b>For testing purposes only.</b> Cancel the authorization or refund the payment.",
        "operationId": "cancelOrRefundUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "pspReference",
            "in": "query",
            "description": "pspReference",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModificationResult",
              "originalRef": "ModificationResult"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/payment/capture": {
      "get": {
        "tags": [
          "payment-integration-test-controller"
        ],
        "summary": "capture",
        "description": "<b>For testing purposes only.</b> Captures an existing reference in Adyen.",
        "operationId": "captureUsingGET",
        "parameters": [
          {
            "name": "amount",
            "in": "query",
            "description": "amount",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency",
            "in": "query",
            "description": "currency",
            "required": false,
            "type": "string"
          },
          {
            "name": "pspReference",
            "in": "query",
            "description": "pspReference",
            "required": false,
            "type": "string"
          },
          {
            "name": "reference",
            "in": "query",
            "description": "reference",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModificationResult",
              "originalRef": "ModificationResult"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/payment/capture/users/{userId}/referenceLocalDev/{orderCode}": {
      "get": {
        "tags": [
          "payment-integration-test-controller"
        ],
        "summary": "creates a capture",
        "description": "<b>For testing purposes only.</b> Creates a capture for a given order.",
        "operationId": "captureReferenceLocalDevUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderCode",
            "in": "path",
            "description": "Order code",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/payment/consignments/users/{userId}/referenceLocalDev/{orderCode}": {
      "get": {
        "tags": [
          "payment-integration-test-controller"
        ],
        "summary": "creates a consignment",
        "description": "<b>For testing purposes only.</b> Creates a consignment for a given order.",
        "operationId": "consignmentReferenceLocalDevUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderCode",
            "in": "path",
            "description": "Order code",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/payment/consignments/users/{userId}/referenceLocalDev/{orderCode}/import": {
      "post": {
        "tags": [
          "payment-integration-test-controller"
        ],
        "summary": "import a custom consignment",
        "description": "<b>For testing purposes only.</b> Creates a custom consignments for a given order. If consignments are not provided, then is created consignment with a partially shipped consignment entries for all order entries.",
        "operationId": "importPartialConsignmentReferenceLocalDevUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "consignmentDtos",
            "description": "Required fields are: 'code', 'status', 'shipTrackingNumber', 'shippingDate' and 'carrierCode', if you want to use default behaviour then fill up with empty brackets []",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShipmentConsignmentDto",
                "originalRef": "ShipmentConsignmentDto"
              }
            }
          },
          {
            "name": "orderCode",
            "in": "path",
            "description": "Order code",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/payment/consignments/users/{userId}/referenceLocalDev/{orderCode}/import/complete": {
      "post": {
        "tags": [
          "payment-integration-test-controller"
        ],
        "summary": "import a complete consignment",
        "description": "<b>For testing purposes only.</b> Creates a complete consignment for a given order.",
        "operationId": "importCompleteConsignmentReferenceLocalDevUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderCode",
            "in": "path",
            "description": "Order code",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/payment/create/adyenNotification": {
      "post": {
        "tags": [
          "payment-integration-test-controller"
        ],
        "summary": "capture",
        "description": "<b>For testing purposes only.</b> Create Adyen Notification",
        "operationId": "createAdyenNotificationUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "amount",
            "in": "query",
            "description": "amount",
            "required": false,
            "type": "number"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency",
            "in": "query",
            "description": "currency",
            "required": false,
            "type": "string"
          },
          {
            "name": "eventCode",
            "in": "query",
            "description": "eventCode",
            "required": false,
            "type": "string"
          },
          {
            "name": "paymentMethod",
            "in": "query",
            "description": "paymentMethod",
            "required": false,
            "type": "string"
          },
          {
            "name": "pspReference",
            "in": "query",
            "description": "pspReference",
            "required": false,
            "type": "string"
          },
          {
            "name": "reason",
            "in": "query",
            "description": "reason",
            "required": false,
            "type": "string"
          },
          {
            "name": "reference",
            "in": "query",
            "description": "reference",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/payment/order/shippingEvent": {
      "get": {
        "tags": [
          "payment-integration-test-controller"
        ],
        "summary": "sets Order to shipped status and sends event",
        "description": "<b>For testing purposes only.</b> The order needs to exist in hybris.",
        "operationId": "sendShippedEventUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderCode",
            "in": "query",
            "description": "orderCode",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/payment/paymentWithDirectBanking": {
      "get": {
        "tags": [
          "payment-integration-test-controller"
        ],
        "summary": "creates an payment with Direct Banking",
        "description": "<b>Would need support for SEPA Direct Banking. This is currently not enabled in any Fiskars Merchant Account unfortunately. For testing purposes only.</b> Creates a payment with Direct Banking for the given reference with the set amount and currency.",
        "operationId": "paymentWithDirectBankingUsingGET",
        "parameters": [
          {
            "name": "amount",
            "in": "query",
            "description": "amount",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency",
            "in": "query",
            "description": "currency",
            "required": false,
            "type": "string"
          },
          {
            "name": "reference",
            "in": "query",
            "description": "reference",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaymentResult",
              "originalRef": "PaymentResult"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/test/payment/simulateImmediateCapturePayment/{orderCode}": {
      "post": {
        "tags": [
          "payment-integration-test-controller"
        ],
        "summary": "do an immediate capture payment",
        "description": "<b>For testing purposes only.",
        "operationId": "simulateImmediateCapturePaymentUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderCode",
            "in": "path",
            "description": "Order code",
            "required": true,
            "type": "string"
          },
          {
            "name": "priceToCapture",
            "in": "query",
            "description": "priceToCapture",
            "required": false,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/titles": {
      "get": {
        "tags": [
          "miscs-controller"
        ],
        "summary": "get titles",
        "description": "Lists all localized titles",
        "operationId": "getTitlesUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TitleList",
              "originalRef": "TitleList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users": {
      "post": {
        "tags": [
          "users-controller"
        ],
        "summary": "register user",
        "description": "Registers a customer. <br/><br/><b>Permitted only for customer managers, clients or trusted clients</b>",
        "operationId": "registerUserUsingPOST_1",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "in": "body",
            "name": "user",
            "description": "uid, password, titleCode, firstName, lastName",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserSignUp",
              "originalRef": "UserSignUp"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User",
              "originalRef": "User"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}": {
      "get": {
        "tags": [
          "users-controller"
        ],
        "summary": "get user",
        "description": "Returns customer profile. <br/><br/><b>Permitted for clients, customers and customer managers</b>",
        "operationId": "getUserUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User",
              "originalRef": "User"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "put": {
        "tags": [
          "users-controller"
        ],
        "summary": "put user",
        "description": "Updates customer profile. Attributes not provided in the request body will be defined again (set to null or default). <br/><br/><b>Permitted for trusted clients, customers and customer managers. Trusted client or customer manager is able to impersonate as any other user and change profile on their behalf.</b>",
        "operationId": "putUserUsingPUT_1",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency",
            "in": "formData",
            "description": "Customer's currency",
            "required": false,
            "type": "string"
          },
          {
            "name": "firstName",
            "in": "formData",
            "description": "Customer's first name",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "formData",
            "description": "Customer's language",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "formData",
            "description": "Customer's last name",
            "required": false,
            "type": "string"
          },
          {
            "name": "titleCode",
            "in": "formData",
            "description": "Customer's title code. For a list of codes, see /{baseSiteId}/titles resource",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "delete": {
        "tags": [
          "users-controller"
        ],
        "summary": "deactivate user",
        "description": "Removes customer profile. <br/><br/><b>Permitted for trusted clients, customers and customer managers. Trusted client is able to impersonate as any other user and deactivate profile on their behalf.</b>",
        "operationId": "deactivateUserUsingDELETE",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "patch": {
        "tags": [
          "users-controller"
        ],
        "summary": "update user",
        "description": "Updates customer profile. Only attributes provided in the request body will be changed. <br/><br/><b>Permitted for trusted clients, customers and customer managers. Trusted client or customer manager is able to impersonate as any other user and change profile on their behalf.</b>",
        "operationId": "updateUserUsingPATCH",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "user",
            "description": "firstName, lastName, titleCode, currency(isocode), language(isocode)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User",
              "originalRef": "User"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/addresses": {
      "get": {
        "tags": [
          "users-controller"
        ],
        "summary": "get addresses",
        "description": "Returns customer's addresses. <br/><br/><b>Permitted for trusted clients, customers and customer managers. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf</b>",
        "operationId": "getAddressesUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AddressList",
              "originalRef": "AddressList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "users-controller"
        ],
        "summary": "create address",
        "description": "Creates a new address. <br/><br/><b>Permitted for customers, guests, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf</b>",
        "operationId": "createAddressUsingPOST_1",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "address",
            "description": "firstName, lastName, titleCode, line1, line2, town, postalCode, country(isocode), region(isocode), defaultAddress",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address",
              "originalRef": "Address"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Address",
              "originalRef": "Address"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/addresses/verification": {
      "post": {
        "tags": [
          "users-controller"
        ],
        "summary": "verify address",
        "description": "Verifies the address. <br/><br/><b>Permitted for customers, guests, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf</b>",
        "operationId": "verifyAddressUsingPOST",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "address",
            "description": "firstName, lastName, titleCode, line1, line2, town, postalCode, country(isocode), region(isocode)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address",
              "originalRef": "Address"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AddressValidation",
              "originalRef": "AddressValidation"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/addresses/{addressId}": {
      "get": {
        "tags": [
          "users-controller"
        ],
        "summary": "get address",
        "description": "Returns detailed information about address with a given id. <br/><br/><b>Permitted for customers, guests, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf</b>",
        "operationId": "getAddressUsingGET",
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "Address identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Address",
              "originalRef": "Address"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "put": {
        "tags": [
          "users-controller"
        ],
        "summary": "put address",
        "description": "Updates the address. Attributes not provided in the request will be defined again (set to null or default). <br/><br/><b>Permitted for customers, guests, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf</b>",
        "operationId": "putAddressUsingPUT",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "Address identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "country.isocode",
            "in": "formData",
            "description": "Country isocode. This parameter is required and have influence on how rest of parameters are validated (e.g. if parameters are required : line1,line2,town,postalCode,region.isocode)",
            "required": true,
            "type": "string"
          },
          {
            "name": "defaultAddress",
            "in": "formData",
            "description": "Parameter specifies if address should be default for customer",
            "required": false,
            "type": "string"
          },
          {
            "name": "firstName",
            "in": "formData",
            "description": "Customer's first name. This parameter is required",
            "required": true,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "formData",
            "description": "Customer's last name. This parameter is required",
            "required": true,
            "type": "string"
          },
          {
            "name": "line1",
            "in": "formData",
            "description": "First part of address. If this parameter is required depends on country (usually it is required)",
            "required": false,
            "type": "string"
          },
          {
            "name": "line2",
            "in": "formData",
            "description": "Second part of address. If this parameter is required depends on country (usually it is not required)",
            "required": false,
            "type": "string"
          },
          {
            "name": "postalCode",
            "in": "formData",
            "description": "Postal code. If this parameter is required depends on country (usually it is required)",
            "required": false,
            "type": "string"
          },
          {
            "name": "region.isocode",
            "in": "formData",
            "description": "Isocode for region. If this parameter is required depends on country",
            "required": false,
            "type": "string"
          },
          {
            "name": "titleCode",
            "in": "formData",
            "description": "Customer's title code. This parameter is required. For a list of codes, see /{baseSiteId}/titles resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "town",
            "in": "formData",
            "description": "Town name. If this parameter is required depends on country (usually it is required)",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "delete": {
        "tags": [
          "users-controller"
        ],
        "summary": "deleteAddress",
        "description": "Removes customer's address. <br/><br/><b>Permitted for customers, guests, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf</b>",
        "operationId": "deleteAddressUsingDELETE",
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "Address identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "patch": {
        "tags": [
          "users-controller"
        ],
        "summary": "patch address",
        "description": "Updates the address. Only attributes provided in the request body will be changed. <br/><br/><b>Permitted for customers, guests, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf</b>",
        "operationId": "patchAddressUsingPATCH",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "address",
            "description": "firstName, lastName, titleCode, line1, line2, town, postalCode, region(isocode), country(isocode), defaultAddress",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address",
              "originalRef": "Address"
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "Address identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts": {
      "get": {
        "tags": [
          "carts-controller"
        ],
        "summary": "get carts",
        "description": "Lists all customer carts. <br /><br /><b>Permitted only for non-anonymous users</b>",
        "operationId": "getCartsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "Optional pagination parameter in case of savedCartsOnly == true. Default value 0",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Optional parameter in case of savedCartsOnly == true. Default value 20",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "savedCartsOnly",
            "in": "query",
            "description": "Optional parameter. If the parameter is provided and its value is true only saved carts are returned",
            "required": false,
            "type": "boolean",
            "default": false,
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Optional sort criterion in case of savedCartsOnly == true. No default value",
            "required": false,
            "type": "string",
            "allowEmptyValue": false,
            "x-example": "byName"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CartList",
              "originalRef": "CartList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "create cart",
        "description": "Creates a new cart or restores an anonymous cart as a user's cart (if an old Cart Id is given in the request) <br /><br /><b>Cart may be created by everybody. Restoring anonymous carts is permitted only for non anonymous users</b>",
        "operationId": "createCartUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "deliveryModeType",
            "in": "formData",
            "description": "Delivery mode type (e.g. HOME_DELIVERY, PICKUP_LOCATION_DELIVERY or STORE_DELIVERY). Default is HOME_DELIVERY",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "keepAnonymousCart",
            "in": "formData",
            "description": "FALSE: anonymous- and user-cart get merged (default behavior). TRUE: the cart of the user is replaced by the anonymous cart.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "oldCartId",
            "in": "formData",
            "description": "Anonymous / Guest user cart GUID",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Cart",
              "originalRef": "Cart"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}": {
      "get": {
        "tags": [
          "carts-controller"
        ],
        "summary": "get cart",
        "description": "Returns the cart with a given identifier. When the cart or the user doesn't exist an error with code 404 will be thrown.",
        "operationId": "getCartUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cart",
              "originalRef": "Cart"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "delete": {
        "tags": [
          "carts-controller"
        ],
        "summary": "delete cart",
        "description": "Deletes a cart with a given cart id",
        "operationId": "deleteCartUsingDELETE",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/additionalOrderData": {
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "set additional order data",
        "description": "Set a additional order data (receipt number, order note) to cart<br /><br /><b>Permitted only for employees with group concessionStoreEmployeeGroup.</b>",
        "operationId": "setAdditionalOrderDataUsingPOST",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "additionalOrderData",
            "description": "additionalOrderData",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdditionalOrderDataWsDTO",
              "originalRef": "AdditionalOrderDataWsDTO"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/customerDetails": {
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "set customer details",
        "description": "Creates an customerDetails and assigns it to the cart as the Customer Details address<br /><br /><b>Permitted only for guests, customer managers or trusted clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf</b>",
        "operationId": "setCustomerDetailsUsingPOST",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "customerDetails",
            "description": "firstName, lastName, line1, postalCode, town, country(isocode)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address",
              "originalRef": "Address"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/customerInformation": {
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "set delivery address, payment address and customer details",
        "description": "Handles setting of Devilery Address, Payment Address and Customer Details in one Call",
        "operationId": "setCustomerInformationUsingPOST",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "customerInformation",
            "description": "customerInformation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerInformationWsDTO",
              "originalRef": "CustomerInformationWsDTO"
            }
          },
          {
            "name": "finalDestination",
            "in": "query",
            "description": "Final destination",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery": {
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "set delivery address",
        "description": "Creates an address and assigns it to the cart as the delivery address<br /><br /><b>Permitted only for guests, customer managers or trusted clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf</b>",
        "operationId": "setDeliveryAddressUsingPOST",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "address",
            "description": "firstName, lastName, line1, postalCode, town, country(isocode)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address",
              "originalRef": "Address"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "finalDestination",
            "in": "query",
            "description": "Final destination",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/deliveryToStoreAddress": {
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "set store address as delivery address",
        "description": "Set the store address as delivery address<br /><br /><b>Permitted only for employees with group concessionStoreEmployeeGroup.</b>",
        "operationId": "setDeliveryToStoreAddressUsingPOST",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "customerDetails",
            "description": "firstName, lastName, email, phone",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Address",
              "originalRef": "Address"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "query",
            "description": "Point of Service identifier",
            "required": true,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "taxExempt",
            "in": "query",
            "description": "Tax exempt",
            "required": true,
            "type": "boolean",
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeliveryToStoreWsDTO",
              "originalRef": "DeliveryToStoreWsDTO"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/payment": {
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "set payment address",
        "description": "Creates an address and assigns it to the cart as the payment address<br /><br /><b>Permitted only for guests, customer managers or trusted clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf</b>",
        "operationId": "setPaymentAddressUsingPOST",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "address",
            "description": "firstName, lastName, line1, postalCode, town, country(isocode), email",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address",
              "originalRef": "Address"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/clonesavedcart": {
      "post": {
        "tags": [
          "save-cart-controller"
        ],
        "summary": "clone save cart",
        "description": "Explicitly clones a cart",
        "operationId": "cloneSaveCartUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier <ul><li>cart code for logged in user</li><li>cart guid for anonymous user</li><li>'current' for the last modified cart</li></ul>",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "The description that should be applied to the cloned cart",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "name",
            "in": "formData",
            "description": "The name that should be applied to the cloned cart",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaveCartResult",
              "originalRef": "SaveCartResult"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/consolidateValidation/expressCheckout": {
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "consolidates validation for customer information, delivery mode and prepare for checkout",
        "description": "Handles setting of Devilery Address, Payment Address, Customer Details, Delivery mode and validates Cart For PrepareForCheckout  in one Call",
        "operationId": "consolidateValidationForExpressCheckoutUsingPOST",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "customerInformation",
            "description": "customerInformation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerInformationWsDTO",
              "originalRef": "CustomerInformationWsDTO"
            }
          },
          {
            "name": "deliveryModeId",
            "in": "query",
            "description": "Delivery mode identifier (code)",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "deliveryTypeCode",
            "in": "query",
            "description": "Delivery Mode Type (code). E.g. HOME_DELIVERY, PICKUP_LOCATION_DELIVERY or STORE_DELIVERY",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "finalDestination",
            "in": "query",
            "description": "Final destination",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "requestedDeliveryTimestamp",
            "in": "query",
            "description": "Requested delivery timestamp",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cart",
              "originalRef": "Cart"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/crmVouchers": {
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "apply voucher on cart",
        "description": "Applies voucher discount on cart",
        "operationId": "applyCrmVoucherUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cart",
              "originalRef": "Cart"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "delete": {
        "tags": [
          "carts-controller"
        ],
        "summary": "remove voucher on cart",
        "description": "Removes voucher discount on cart",
        "operationId": "removeCrmVoucherUsingDELETE",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cart",
              "originalRef": "Cart"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/deliveryCountry": {
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "set country on cart",
        "description": "Sets delivery country on cart.",
        "operationId": "setCountryOnCartUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cart",
              "originalRef": "Cart"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode": {
      "get": {
        "tags": [
          "carts-controller"
        ],
        "summary": "get cart delivery mode",
        "description": "Returns the delivery mode selected for the cart<br /><br /><b>Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer. Trusted client or customer manager may impersonate as any user and access cart on their behalf</b>",
        "operationId": "getCartDeliveryModeUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeliveryMode",
              "originalRef": "DeliveryMode"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "put": {
        "tags": [
          "carts-controller"
        ],
        "summary": "set cart delivery mode",
        "description": "Sets the delivery mode with a given identifier for the cart<br /><br /><b>Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer. Trusted client or customer manager may impersonate as any user and access cart on their behalf.</b> Timestamp Format: 2019-01-01T00:00:00.000Z",
        "operationId": "setCartDeliveryModeUsingPUT",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "deliveryModeId",
            "in": "formData",
            "description": "Delivery mode identifier (code)",
            "required": true,
            "type": "string"
          },
          {
            "name": "deliveryTypeCode",
            "in": "formData",
            "description": "Delivery mode type (e.g. HOME_DELIVERY, PICKUP_LOCATION_DELIVERY or STORE_DELIVERY). Default is HOME_DELIVERY",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "requestedDeliveryTimestamp",
            "in": "query",
            "description": "requestedDeliveryTimestamp",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "delete": {
        "tags": [
          "carts-controller"
        ],
        "summary": "remove delivery mode",
        "description": "Removes the delivery mode from the cart<br /><br /><b>Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer. Trusted client or customer manager may impersonate as any user and access cart on their behalf</b>",
        "operationId": "removeDeliveryModeUsingDELETE",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymodes": {
      "get": {
        "tags": [
          "carts-controller"
        ],
        "summary": "get supported delivery modes",
        "description": "Returns all delivery modes supported for the current base store and cart delivery address. A delivery address must be set for the cart, otherwise an empty list will be returned<br /><br /><b>Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer. Trusted client or customer manager may impersonate as any user and access cart on their behalf</b>",
        "operationId": "getSupportedDeliveryModesUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeliveryModeList",
              "originalRef": "DeliveryModeList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": true
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymodesextended": {
      "get": {
        "tags": [
          "carts-controller"
        ],
        "summary": "get supported delivery modes extended",
        "description": "Returns all delivery modes supported for the current base store and cart delivery address + Pickup Location Delivery and Delivery to Store. A delivery address must be set for the cart, otherwise an empty list will be returned<br /><br /><b>Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer. Trusted client or customer manager may impersonate as any user and access cart on their behalf</b>",
        "operationId": "getSupportedDeliveryModesExtendedUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExtendedDeliveryModeListWsDTO",
              "originalRef": "ExtendedDeliveryModeListWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/entries": {
      "get": {
        "tags": [
          "carts-controller"
        ],
        "summary": "get cart entries",
        "description": "Returns cart entries",
        "operationId": "getCartEntriesUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderEntryList",
              "originalRef": "OrderEntryList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "add cart entry with product configuration",
        "description": "Adds a product including product configuration to the cart",
        "operationId": "addCartEntryUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Identification of base site",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "description": "Code of the product to be added to cart. Product look-up is performed for the current product catalog version",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "customizationCost",
            "in": "query",
            "description": "customizationCost",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "customizedProductImageUrl",
            "in": "query",
            "description": "customizedProductImageUrl",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "pickupStore",
            "in": "query",
            "description": "Name of the store where product will be picked. Set only if want to pick up from a store",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "productConfiguration",
            "description": "type, price, message",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          {
            "name": "qty",
            "in": "query",
            "description": "Quantity of product, default value is 1",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "recipeId",
            "in": "query",
            "description": "recipeId",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CartModification",
              "originalRef": "CartModification"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}": {
      "get": {
        "tags": [
          "carts-controller"
        ],
        "summary": "get cart entry",
        "description": "Returns the details of the cart entries",
        "operationId": "getCartEntryUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "Entry number",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderEntry",
              "originalRef": "OrderEntry"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "update cart entry",
        "description": "Updates the quantity of a single cart entry and details of the store where the cart entry will be picked.",
        "operationId": "updateCartEntryPostRequestUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Identification of base site",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "Entry number",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "pickupStore",
            "in": "formData",
            "description": "Name of the store where product will be picked. Set only if want to pick up from a store",
            "required": false,
            "type": "string"
          },
          {
            "name": "qty",
            "in": "formData",
            "description": "Quantity of product",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CartModification",
              "originalRef": "CartModification"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "put": {
        "tags": [
          "carts-controller"
        ],
        "summary": "set cart entry",
        "description": "Updates the quantity of a single cart entry and details of the store where the cart entry will be picked. Attributes not provided in request will be defined again (set to null or default)",
        "operationId": "setCartEntryUsingPUT",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Identification of base site",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "Entry number",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "pickupStore",
            "in": "formData",
            "description": "Name of the store where product will be picked. Set only if want to pick up from a store",
            "required": false,
            "type": "string"
          },
          {
            "name": "qty",
            "in": "formData",
            "description": "Quantity of product",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CartModification",
              "originalRef": "CartModification"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "delete": {
        "tags": [
          "carts-controller"
        ],
        "summary": "remove cart entry",
        "description": "Deletes cart entry",
        "operationId": "removeCartEntryUsingDELETE",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "Entry number",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RemoveEntryFromCartResultWsDTO",
              "originalRef": "RemoveEntryFromCartResultWsDTO"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "patch": {
        "tags": [
          "carts-controller"
        ],
        "summary": "update cart entry",
        "description": "Updates the quantity of a single cart entry and details of the store where the cart entry will be picked.",
        "operationId": "updateCartEntryUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Identification of base site",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "Entry number",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "pickupStore",
            "in": "formData",
            "description": "Name of the store where product will be picked. Set only if want to pick up from a store",
            "required": false,
            "type": "string"
          },
          {
            "name": "qty",
            "in": "formData",
            "description": "Quantity of product",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CartModification",
              "originalRef": "CartModification"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}/addServiceProductEntry": {
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "add service product entry",
        "description": "Adds a service product to existing product in the cart",
        "operationId": "addServiceProductEntryUsingPOST",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "Cart entry number",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "serviceProductDTO",
            "description": "serviceProductCode, values (optionCode, optionValue)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceProductEntryWsDTO",
              "originalRef": "ServiceProductEntryWsDTO"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CartModification",
              "originalRef": "CartModification"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}/updateSPEntries": {
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "update service product entries",
        "description": "Replaces existing ServiceProductEntries with the set of Entries provided by the WsDTO",
        "operationId": "updateServiceProductEntriesUsingPOST",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "Cart entry number",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "serviceProductsDTO",
            "description": "serviceProductCode, values (optionCode, optionValue)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceProductEntriesWsDTO",
              "originalRef": "ServiceProductEntriesWsDTO"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CartModification",
              "originalRef": "CartModification"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}/{serviceProductCode}": {
      "put": {
        "tags": [
          "carts-controller"
        ],
        "summary": "set service product entry",
        "description": "Updates the values of a service product entry",
        "operationId": "replaceServiceProductEntryUsingPUT",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "Entry number",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceProductCode",
            "in": "path",
            "description": "Service product code",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "wsDto",
            "description": "values (optionCode, optionValue)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateServiceProductEntryWsDTO",
              "originalRef": "UpdateServiceProductEntryWsDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CartModification",
              "originalRef": "CartModification"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "delete": {
        "tags": [
          "carts-controller"
        ],
        "summary": "remove service product from entry",
        "description": "Deletes service product from cart entry",
        "operationId": "removeServiceProductEntryUsingDELETE",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "Entry number",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceProductCode",
            "in": "path",
            "description": "Service product code",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "patch": {
        "tags": [
          "carts-controller"
        ],
        "summary": "update service product entry",
        "description": "Updates the values of a service product entry",
        "operationId": "updateServiceProductEntryUsingPATCH",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "entryNumber",
            "in": "path",
            "description": "Entry number",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceProductCode",
            "in": "path",
            "description": "Service product code",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "wsDto",
            "description": "values (optionCode, optionValue)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateServiceProductEntryWsDTO",
              "originalRef": "UpdateServiceProductEntryWsDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CartModification",
              "originalRef": "CartModification"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/entriesWithServiceProducts": {
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "add cart entry with service products",
        "description": "Adds a product and a service products to the cart",
        "operationId": "addCartEntryWithServiceProductsUsingPOST",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Identification of base site",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "wsDto",
            "description": "productCode, qty, pickupStore, serviceProductCode, values (optionCode, optionValue)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCartEntryWithServiceProductsWsDTO",
              "originalRef": "CreateCartEntryWithServiceProductsWsDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CartModification",
              "originalRef": "CartModification"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/expressPay": {
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "used for express payment methods, like apple pay",
        "description": "Handles setting of Devilery Address, Payment Address, Customer Details, Delivery mode and validates Cart For PrepareForCheckout  in one Call",
        "operationId": "expressPayUsingPOST",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "customerInformation",
            "description": "customerInformation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerInformationWsDTO",
              "originalRef": "CustomerInformationWsDTO"
            }
          },
          {
            "name": "deliveryModeId",
            "in": "query",
            "description": "Delivery mode identifier (code)",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "deliveryTypeCode",
            "in": "query",
            "description": "Delivery Mode Type (code). E.g. HOME_DELIVERY, PICKUP_LOCATION_DELIVERY or STORE_DELIVERY",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cart",
              "originalRef": "Cart"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/flagForDeletion": {
      "patch": {
        "tags": [
          "save-cart-controller"
        ],
        "summary": "flag for deletion",
        "description": "Flags a cart for deletion (the cart doesn't have corresponding save cart attributes anymore). The cart is not actually deleted from the database. But with the removal of the saved cart attributes, this cart will be taken care of by the cart removal job just like any other cart",
        "operationId": "flagForDeletionUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier <ul><li>cart code for logged in user</li><li>cart guid for anonymous user</li><li>'current' for the last modified cart</li></ul>",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaveCartResult",
              "originalRef": "SaveCartResult"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/guestLogin": {
      "put": {
        "tags": [
          "carts-controller"
        ],
        "summary": "guest login",
        "description": "This step is required to make a guest checkout <br /><br /><b>Permitted only for client or trusted client</b>",
        "operationId": "guestLoginUsingPUT",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Principal",
              "originalRef": "Principal"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/loyaltyPoints": {
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "apply loyalty points on cart",
        "description": "Sets and applies a loyalty points based on the loyaltyPoints on cart",
        "operationId": "applyLoyaltyPointsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "loyaltyPoints",
            "in": "formData",
            "description": "Number of loyalty points. It's zero if left empty",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/payWithGiftCard": {
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "GiveX pay with gift card",
        "description": "Returns Cart data and balance details of a GiveX digital gift card. <br /><br /><b>Permitted only for trusted client</b>",
        "operationId": "payWithGiftCardUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site id",
            "required": true,
            "type": "string"
          },
          {
            "name": "cardNumber",
            "in": "formData",
            "description": "ISO serial (card number)",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": true,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "securityCode",
            "in": "formData",
            "description": "Security code (PIN number)",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GiveXGiftCardPaymentWsDTO",
              "originalRef": "GiveXGiftCardPaymentWsDTO"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/prepareForCheckout": {
      "get": {
        "tags": [
          "carts-controller"
        ],
        "summary": "prepare cart for checkout",
        "description": "Validates if the cart with the given identifier is ready for checkout. External taxes are calculated for the cart.",
        "operationId": "prepareCartForCheckoutUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cart",
              "originalRef": "Cart"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/promotions": {
      "get": {
        "tags": [
          "carts-controller"
        ],
        "summary": "get promotions",
        "description": "Return information about promotions applied on cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine<br /><br /><b>Permitted only for non anonymous users or clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf</b>",
        "operationId": "getPromotionsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PromotionResultList",
              "originalRef": "PromotionResultList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "apply promotion",
        "description": "Enables the promotion for the order based on the promotionId defined for the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine",
        "operationId": "applyPromotionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "promotionId",
            "in": "formData",
            "description": "Promotion identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/promotions/{promotionId}": {
      "get": {
        "tags": [
          "carts-controller"
        ],
        "summary": "get promotion",
        "description": "Return information about promotion with given id, applied on cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine<br /><br /><b>Permitted only for non anonymous users or clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf</b>",
        "operationId": "getPromotionUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "promotionId",
            "in": "path",
            "description": "Promotion identifier (code)",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PromotionResultList",
              "originalRef": "PromotionResultList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "delete": {
        "tags": [
          "carts-controller"
        ],
        "summary": "remove promotion",
        "description": "Disables the promotion for the order based on the promotionId defined for the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine<br /><br/><b>Permitted only for trusted clients</b>",
        "operationId": "removePromotionUsingDELETE",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "promotionId",
            "in": "path",
            "description": "Promotion identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/removeGiftCardFromCart": {
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "GiveX remove gift card from cart",
        "description": "Returns cart data. <br /><br /><b>Permitted only for trusted client</b>",
        "operationId": "removeGiftCardFromCartUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site id",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": true,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cart",
              "originalRef": "Cart"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/removeGiftMessage": {
      "delete": {
        "tags": [
          "carts-controller"
        ],
        "summary": "remove gift message from cart",
        "description": "Removes gift message from cart",
        "operationId": "removeGiftMessageFromOrderUsingDELETE",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cart",
              "originalRef": "Cart"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/restoresavedcart": {
      "patch": {
        "tags": [
          "save-cart-controller"
        ],
        "summary": "restore saved cart",
        "operationId": "restoreSavedCartUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier <ul><li>cart code for logged in user</li><li>cart guid for anonymous user</li><li>'current' for the last modified cart</li></ul>",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaveCartResult",
              "originalRef": "SaveCartResult"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/save": {
      "patch": {
        "tags": [
          "save-cart-controller"
        ],
        "summary": "save cart",
        "description": "Explicitly saves a cart",
        "operationId": "saveCartUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier <ul><li>cart code for logged in user</li><li>cart guid for anonymous user</li><li>'current' for the last modified cart</li></ul>",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "saveCartDescription",
            "in": "formData",
            "description": "The description that should be applied to the saved cart",
            "required": false,
            "type": "string"
          },
          {
            "name": "saveCartName",
            "in": "formData",
            "description": "The name that should be applied to the saved cart",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaveCartResult",
              "originalRef": "SaveCartResult"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/savedcart": {
      "get": {
        "tags": [
          "save-cart-controller"
        ],
        "summary": "get saved cart",
        "description": "Returns saved cart by it id for authenticated user",
        "operationId": "getSavedCartUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier <ul><li>cart code for logged in user</li><li>cart guid for anonymous user</li><li>'current' for the last modified cart</li></ul>",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaveCartResult",
              "originalRef": "SaveCartResult"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/setGiftMessage": {
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "set gift message on cart",
        "description": "Sets gift message on a cart",
        "operationId": "setGiftMessageOnOrderUsingPOST",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "serviceProductDTO",
            "description": "serviceProductCode, values (optionCode, optionValue)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceProductEntryWsDTO",
              "originalRef": "ServiceProductEntryWsDTO"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cart",
              "originalRef": "Cart"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/taxExemptCertificateNumber": {
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "set tax exempt certificate number",
        "description": "Set tax exempt certificate number to cart<br /><br /><b>Permitted only for employees with group concessionStoreEmployeeGroup.</b>",
        "operationId": "setTaxExemptCertificateNumberUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "taxExemptCertificateNumber",
            "in": "formData",
            "description": "Tax Exempt Certificate Number",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers": {
      "get": {
        "tags": [
          "carts-controller"
        ],
        "summary": "get vouchers",
        "description": "Returns list of coupons applied to the cart<br /><br/><b>Permitted only for non anonymous users or clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf</b>",
        "operationId": "getVouchersUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VoucherList",
              "originalRef": "VoucherList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "carts-controller"
        ],
        "summary": "apply voucher for cart",
        "description": "Applies a coupon based on the voucherId defined for the cart<br /><br/><b>Permitted only for non anonymous users or clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf</b>",
        "operationId": "applyVoucherForCartUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "voucherId",
            "in": "formData",
            "description": "Coupon identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers/{voucherId}": {
      "delete": {
        "tags": [
          "carts-controller"
        ],
        "summary": "release coupon from cart",
        "description": "Removes a coupon based on the voucherId defined for the current cart<br /><br/><b>Permitted only for non anonymous users or clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf</b>",
        "operationId": "releaseVoucherFromCartUsingDELETE",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user; cart guid for anonymous user; 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "voucherId",
            "in": "path",
            "description": "Coupon identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/customergroups": {
      "get": {
        "tags": [
          "users-controller"
        ],
        "summary": "get all customer groups for customer",
        "description": "Returns all customer groups of a customer. <br/><br/><b>Permitted for customers, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf</b>",
        "operationId": "getAllCustomerGroupsForCustomerUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserGroupList",
              "originalRef": "UserGroupList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/employeestoreaddress": {
      "get": {
        "tags": [
          "users-controller"
        ],
        "summary": "get addresses of stores where an employee is assigned to",
        "description": "Returns detailed information about store addresses for a user with a given id.",
        "operationId": "getEmployeeStoreAddressUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PointOfServiceList",
              "originalRef": "PointOfServiceList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/login": {
      "put": {
        "tags": [
          "users-controller"
        ],
        "summary": "change login",
        "description": "Changes customer's login. <br/><br/><b>Permitted for trusted clients, customers and customer managers. Trusted client or customer manager is able to impersonate as any other user and change login on their behalf</b>",
        "operationId": "changeLoginUsingPUT",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "newLogin",
            "in": "formData",
            "description": "Customer's new login. Customer login is case insensitive",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "Customer's current password",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/orders": {
      "get": {
        "tags": [
          "orders-controller"
        ],
        "summary": "get orders for user",
        "description": "Returns order history data for all orders placed by the specific user for the specific base store. Response contains orders search result displayed in several pages if needed <br /><br /> <b>Allowed only for customers, customer managers, trusted clients. Trusted client is able to impersonate as any customer and access their orders</b>",
        "operationId": "getOrdersForUserUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the return results",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Statuses Filters only certain order statuses. It means: statuses=CANCELLED,CHECKED_VALID would only return orders with status CANCELLED or CHECKED_VALID",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderHistoryList",
              "originalRef": "OrderHistoryList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "head": {
        "tags": [
          "orders-controller"
        ],
        "summary": "get count orders for user",
        "description": "Returns header with a total number of results (orders history for all orders placed by the specific user for the specific base store). <br /><br /> <b>Allowed only for customers, customer managers, trusted clients. Trusted client is able to impersonate as any customer and access their orders</b>",
        "operationId": "getCountOrdersForUserUsingHEAD",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Statuses Filters only certain order statuses. It means: statuses=CANCELLED,CHECKED_VALID would only return orders with status CANCELLED or CHECKED_VALID",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "orders-controller"
        ],
        "summary": "place order",
        "description": "Authorizes cart and places the order. Response contains the new order data <br /><br /> <b>Allowed only for customers, customer managers, trusted clients. Trusted client is able to impersonate as any customer and  place order on his behalf</b>",
        "operationId": "placeOrderUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "query",
            "description": "Cart code for logged in user, cart GUID for guest checkout",
            "required": true,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "urlPrefix",
            "in": "query",
            "description": "Url prefix",
            "required": true,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Order",
              "originalRef": "Order"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/orders/concessionStore": {
      "post": {
        "tags": [
          "orders-controller"
        ],
        "summary": "place order for concession store ",
        "description": "Authorizes cart and places the order. Response contains the new order data <br /><br /> <b>Allowed only for concession store customers</b>",
        "operationId": "placeOrderConcessionStoreUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "query",
            "description": "Cart code for logged in user, cart GUID for guest checkout",
            "required": true,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderedInStore",
            "in": "query",
            "description": "Point of Service in which we place the order",
            "required": true,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "urlPrefix",
            "in": "query",
            "description": "Url prefix",
            "required": true,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Order",
              "originalRef": "Order"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/orders/{code}": {
      "get": {
        "tags": [
          "orders-controller"
        ],
        "summary": "get order for user by code",
        "description": "Returns specific order details based on a specific order code. The response contains detailed order information <br /><br /> <b>Allowed only for customers, customer managers, clients or trusted clients. Trusted client is able to impersonate as any customer and access their orders</b>",
        "operationId": "getOrderForUserByCodeUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Order GUID (Globally Unique Identifier) or order CODE",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Order",
              "originalRef": "Order"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/orders/{code}/cancel": {
      "post": {
        "tags": [
          "orders-controller"
        ],
        "summary": "cancel order",
        "description": "Cancels order with given code and re-creates cart based on recreateCart parameter. If requested, response will contain re-created cart data<br /><br /> <b>Allowed only for customers, customer managers, trusted clients. Trusted client is able to impersonate as any customer and cancel order on his behalf</b>",
        "operationId": "cancelOrderUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Order code",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "recreateCart",
            "in": "formData",
            "description": "Should cart be re-created from order, default is TRUE. If TRUE, cart data is returned",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cart",
              "originalRef": "Cart"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/password": {
      "put": {
        "tags": [
          "users-controller"
        ],
        "summary": "change password",
        "description": "Changes customer's password. <br/><br/><b>Permitted for trusted clients, customers and customer managers. Trusted client or customer manager may change someone's else password without knowing the old one</b>",
        "operationId": "changePasswordUsingPUT",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "newPassword",
            "in": "formData",
            "description": "New password",
            "required": true,
            "type": "string"
          },
          {
            "name": "old",
            "in": "formData",
            "description": "Old password. Required only for ROLE_CUSTOMERGROUP",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/paymentdetails": {
      "get": {
        "tags": [
          "users-controller"
        ],
        "summary": "get payment infos",
        "description": "Return customer's credit card payment details list. <br/><br/><b>Permitted for customers, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf</b>",
        "operationId": "getPaymentInfosUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "saved",
            "in": "query",
            "description": "Type of payment details",
            "required": false,
            "type": "boolean",
            "default": false,
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaymentDetailsList",
              "originalRef": "PaymentDetailsList"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}": {
      "get": {
        "tags": [
          "users-controller"
        ],
        "summary": "get payment details",
        "description": "Returns customer's credit card payment details for a given id. <br/><br/><b>Permitted for customers, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf</b>",
        "operationId": "getPaymentDetailsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "paymentDetailsId",
            "in": "path",
            "description": "Payment details identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaymentDetails",
              "originalRef": "PaymentDetails"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "put": {
        "tags": [
          "users-controller"
        ],
        "summary": "put payment info",
        "description": "Updates existing customer's credit card payment info based on the payment info ID. Attributes not given in request will be defined again (set to null or default). <br/><br/><b>Permitted for customers, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf</b>",
        "operationId": "putPaymentInfoUsingPUT",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "paymentDetails",
            "description": "accountHolderName, cardNumber, cardType, issueNumber, startMonth, expiryMonth, startYear, expiryYear,subscriptionId,defaultPaymentInfo,saved,billingAddress(firstName,lastName,titleCode,line1,line2,town,postalCode,region(isocode),country(isocode),defaultAddress)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentDetails",
              "originalRef": "PaymentDetails"
            }
          },
          {
            "name": "paymentDetailsId",
            "in": "path",
            "description": "Payment details identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "delete": {
        "tags": [
          "users-controller"
        ],
        "summary": "delete payment info",
        "description": "Removes customer's credit card payment details based on its ID. <br/><br/><b>Permitted for customers, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf</b>",
        "operationId": "deletePaymentInfoUsingDELETE",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentDetailsId",
            "in": "path",
            "description": "Payment details identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "patch": {
        "tags": [
          "users-controller"
        ],
        "summary": "update payment info",
        "description": "Updates existing customer's credit card payment details based on its ID. Only attributes given in request will be changed. <br/><br/><b>Permitted for customers, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf</b>",
        "operationId": "updatePaymentInfoUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountHolderName",
            "in": "formData",
            "description": "Name on card. This parameter is required",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "billingAddress.country.isocode",
            "in": "formData",
            "description": "Country isocode. This parameter is required and have influence on how rest of address parameters are validated (e.g. if parameters are required :line1,line2,town,postalCode,region.isocode)",
            "required": true,
            "type": "string"
          },
          {
            "name": "billingAddress.firstName",
            "in": "formData",
            "description": "Customer's first name. This parameter is required",
            "required": true,
            "type": "string"
          },
          {
            "name": "billingAddress.lastName",
            "in": "formData",
            "description": "Customer's last name. This parameter is required",
            "required": true,
            "type": "string"
          },
          {
            "name": "billingAddress.line1",
            "in": "formData",
            "description": "First part of address. If this parameter is required depends on country (usually it is required)",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingAddress.line2",
            "in": "formData",
            "description": "Second part of address. If this parameter is required depends on country (usually it is not required)",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingAddress.postalCode",
            "in": "formData",
            "description": "Postal code. If this parameter is required depends on country (usually it is required)",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingAddress.region.isocode",
            "in": "formData",
            "description": "Isocode for region. If this parameter is required depends on country",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingAddress.titleCode",
            "in": "formData",
            "description": "Customer's title code. This parameter is required. For a list of codes, see /{baseSiteId}/titles resource",
            "required": true,
            "type": "string"
          },
          {
            "name": "billingAddress.town",
            "in": "formData",
            "description": "Town name. If this parameter is required depends on country (usually it is required)",
            "required": false,
            "type": "string"
          },
          {
            "name": "cardNumber",
            "in": "formData",
            "description": "Card number. This parameter is required)",
            "required": true,
            "type": "string"
          },
          {
            "name": "cardType",
            "in": "formData",
            "description": "Card type. This parameter is required. Call GET /{baseSiteId}/cardtypes beforehand to see what card types are supported",
            "required": true,
            "type": "string"
          },
          {
            "name": "defaultPaymentInfo",
            "in": "formData",
            "description": "Parameter defines if the payment details should be used as default for customer",
            "required": false,
            "type": "string"
          },
          {
            "name": "expiryMonth",
            "in": "formData",
            "description": "Month of expiry date. This parameter is required",
            "required": true,
            "type": "string"
          },
          {
            "name": "expiryYear",
            "in": "formData",
            "description": "Year of expiry date. This parameter is required",
            "required": true,
            "type": "string"
          },
          {
            "name": "issueNumber",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "paymentDetailsId",
            "in": "path",
            "description": "Payment details identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "saved",
            "in": "formData",
            "description": "Parameter defines if the payment details should be saved for the customer and than could be reused for future orders",
            "required": false,
            "type": "string"
          },
          {
            "name": "startMonth",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "startYear",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "subscriptionId",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/stores": {
      "get": {
        "tags": [
          "users-controller"
        ],
        "summary": "get concession stores",
        "description": "Returns concession stores current user is assigned on. <br/><br/><b>Permitted for clients, customers and customer managers</b>",
        "operationId": "getUsersStoresUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals below: 'current' for currently authenticated user; 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ConcessionStoresListWsDto",
              "originalRef": "ConcessionStoresListWsDto"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/wishlists": {
      "get": {
        "tags": [
          "wishlist-controller"
        ],
        "summary": "get wishlists",
        "description": "Lists all customer wishlists. <br /><br /><b>Permitted only for non-anonymous users</b>",
        "operationId": "getWishlistsUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WishlistListWsDTO",
              "originalRef": "WishlistListWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "wishlist-controller"
        ],
        "summary": "create wishlist",
        "description": "Creates a new wishlist or  restores/merges an anonymous wishlist as a user's wishlist (if an toMergeWishlistId is given in the request) <br /><br /><b>NOTE:</b> Currently only one wishlist per registered user is possible. In case create is called multiple times it will return the same wishlist and merges an anonymous wishlist in case it's set in the request.",
        "operationId": "createWishlistUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "description",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "isDefault",
            "in": "query",
            "description": "Sets if the wishlist should be the default wishlist for the given user. Only a single wishlist can be default for a user, i.e. when there is already a default wishlist, it will be set to default is false. Default is only allowed for non-anonymous users.",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          },
          {
            "name": "toMergeWishlistId",
            "in": "query",
            "description": "Anonymous wishlist GUID merged into the user's wishlist",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/WishlistWsDTO",
              "originalRef": "WishlistWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/wishlists/{wishlistId}": {
      "get": {
        "tags": [
          "wishlist-controller"
        ],
        "summary": "get wishlist",
        "description": "Returns the wishlist with a given identifier. When the wishlist or the user doesn't exist an error with code 404 will be thrown.",
        "operationId": "getWishlistUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "wishlistId",
            "in": "path",
            "description": "Wishlist identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WishlistWsDTO",
              "originalRef": "WishlistWsDTO"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "delete": {
        "tags": [
          "wishlist-controller"
        ],
        "summary": "delete wishlist",
        "description": "Deletes a wishlist with a given wishlist id",
        "operationId": "deleteWishlistUsingDELETE",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "wishlistId",
            "in": "path",
            "description": "Wishlist identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "patch": {
        "tags": [
          "wishlist-controller"
        ],
        "summary": "update wishlist",
        "description": "Updates the properties (name, description and isDefault) of a wishlist.",
        "operationId": "updateWishlistUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "description",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "isDefault",
            "in": "query",
            "description": "Sets if the wishlist should be the default wishlist for the given user. Only a single wishlist can be default for a user, i.e. when there is already a default wishlist, it will be set to default is false. Default is only allowed for non-anonymous users.",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "wishlistId",
            "in": "path",
            "description": "Wishlist identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WishlistWsDTO",
              "originalRef": "WishlistWsDTO"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/wishlists/{wishlistId}/entries": {
      "post": {
        "tags": [
          "wishlist-controller"
        ],
        "summary": "add wishlist entry",
        "description": "Adds a product to the wishlist",
        "operationId": "addWishlistEntryUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "comment",
            "in": "query",
            "description": "comment",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "productCode",
            "in": "query",
            "description": "productCode",
            "required": true,
            "type": "string"
          },
          {
            "name": "qty",
            "in": "query",
            "description": "qty",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "wishlistId",
            "in": "path",
            "description": "Wishlist identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WishlistEntryWsDTO",
              "originalRef": "WishlistEntryWsDTO"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/users/{userId}/wishlists/{wishlistId}/entries/{productCode}": {
      "delete": {
        "tags": [
          "wishlist-controller"
        ],
        "summary": "remove wishlist entry",
        "description": "Deletes wishlist entry",
        "operationId": "removeWishlistEntryUsingDELETE",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "wishlistId",
            "in": "path",
            "description": "Wishlist identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      },
      "patch": {
        "tags": [
          "wishlist-controller"
        ],
        "summary": "update wishlist entry",
        "description": "Updates the quantity and/or comment of a single wishlist entry.",
        "operationId": "updateWishlistEntryUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "comment",
            "in": "query",
            "description": "comment",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response), possible values are: BASIC, FULL, DEFAULT",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "allowEmptyValue": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language isocode",
            "required": false,
            "type": "string"
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "qty",
            "in": "query",
            "description": "qty",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals: 'current' for currently authenticated user 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "wishlistId",
            "in": "path",
            "description": "Wishlist identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WishlistEntryWsDTO",
              "originalRef": "WishlistEntryWsDTO"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    },
    "/{baseSiteId}/vouchers/{code}": {
      "get": {
        "tags": [
          "vouchers-controller"
        ],
        "summary": "get voucher by code",
        "description": "Returns details of a single voucher according to a voucher code <br /><br /><b>Permitted only for trusted client</b>",
        "operationId": "getVoucherByCodeUsingGET",
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identificator",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Voucher identifier (code)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "BASIC",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Voucher",
              "originalRef": "Voucher"
            }
          },
          "400": {
            "description": "Default error response for any other unspecified error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/errorList",
              "originalRef": "errorList"
            }
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          },
          {
            "oauth2_password": []
          }
        ],
        "deprecated": false
      }
    }
  },
  "securityDefinitions": {
    "oauth2_client_credentials": {
      "type": "oauth2",
      "tokenUrl": "/authorizationserver/oauth/token",
      "flow": "application",
      "scopes": {
        "": ""
      }
    },
    "oauth2_password": {
      "type": "oauth2",
      "tokenUrl": "/authorizationserver/oauth/token",
      "flow": "password",
      "scopes": {
        "": ""
      }
    }
  },
  "definitions": {
    "AdditionalOrderDataWsDTO": {
      "type": "object",
      "properties": {
        "orderNote": {
          "type": "string"
        },
        "receiptNumber": {
          "type": "string"
        }
      },
      "title": "AdditionalOrderDataWsDTO"
    },
    "Address": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "line1",
        "postalCode",
        "titleCode",
        "town"
      ],
      "properties": {
        "cellphone": {
          "type": "string",
          "description": "Cellphone number"
        },
        "companyName": {
          "type": "string",
          "description": "Company Name"
        },
        "country": {
          "description": "Country where address is located",
          "$ref": "#/definitions/Country",
          "originalRef": "Country"
        },
        "defaultAddress": {
          "type": "boolean",
          "description": "Boolean flag if address is default"
        },
        "district": {
          "type": "string",
          "description": "District name"
        },
        "email": {
          "type": "string",
          "description": "Email address"
        },
        "firstName": {
          "type": "string",
          "description": "First name of the address person"
        },
        "formattedAddress": {
          "type": "string",
          "description": "Boolean flag if address is formatted"
        },
        "id": {
          "type": "string",
          "description": "Unique id value of the address which is optional while creating new address. While performing other address operations this value is the key"
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the address person"
        },
        "line1": {
          "type": "string",
          "description": "First line of the address"
        },
        "line2": {
          "type": "string",
          "description": "Second line of the address"
        },
        "phone": {
          "type": "string",
          "description": "Phone number"
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code of the address"
        },
        "region": {
          "description": "Region where address belongs to",
          "$ref": "#/definitions/Region",
          "originalRef": "Region"
        },
        "shippingAddress": {
          "type": "boolean",
          "description": "Boolean flag if address is for shipping"
        },
        "storePickUpId": {
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Title of the address person"
        },
        "titleCode": {
          "type": "string",
          "description": "Code of the title"
        },
        "town": {
          "type": "string",
          "description": "Town, field required"
        },
        "visibleInAddressBook": {
          "type": "boolean",
          "description": "Boolean flag if address is visible in the Address Book"
        }
      },
      "title": "Address",
      "description": "Request body fields required and optional to operate on address data. The DTO is in XML or .json format"
    },
    "AddressDto": {
      "type": "object",
      "properties": {
        "companyName": {
          "type": "string",
          "xml": {
            "name": "companyName",
            "attribute": false,
            "wrapped": false
          }
        },
        "country": {
          "xml": {
            "name": "country",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CountryDto",
          "originalRef": "CountryDto"
        },
        "email": {
          "type": "string",
          "xml": {
            "name": "email",
            "attribute": false,
            "wrapped": false
          }
        },
        "firstName": {
          "type": "string",
          "xml": {
            "name": "firstName",
            "attribute": false,
            "wrapped": false
          }
        },
        "lastName": {
          "type": "string",
          "xml": {
            "name": "lastName",
            "attribute": false,
            "wrapped": false
          }
        },
        "line1": {
          "type": "string",
          "xml": {
            "name": "line1",
            "attribute": false,
            "wrapped": false
          }
        },
        "line2": {
          "type": "string",
          "xml": {
            "name": "line2",
            "attribute": false,
            "wrapped": false
          }
        },
        "phone": {
          "type": "string",
          "xml": {
            "name": "phone",
            "attribute": false,
            "wrapped": false
          }
        },
        "postalCode": {
          "type": "string",
          "xml": {
            "name": "postalCode",
            "attribute": false,
            "wrapped": false
          }
        },
        "region": {
          "xml": {
            "name": "region",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/RegionDto",
          "originalRef": "RegionDto"
        },
        "storePickUpId": {
          "type": "string",
          "xml": {
            "name": "storePickUpId",
            "attribute": false,
            "wrapped": false
          }
        },
        "town": {
          "type": "string",
          "xml": {
            "name": "town",
            "attribute": false,
            "wrapped": false
          }
        }
      },
      "title": "AddressDto"
    },
    "AddressFiltersWsDTO": {
      "type": "object",
      "properties": {
        "blacklistedRegions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Region",
            "originalRef": "Region"
          }
        },
        "removePOBox": {
          "type": "boolean"
        }
      },
      "title": "AddressFiltersWsDTO"
    },
    "AddressList": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "description": "List of addresses",
          "items": {
            "$ref": "#/definitions/Address",
            "originalRef": "Address"
          }
        }
      },
      "title": "AddressList",
      "description": "Representation of an Address list"
    },
    "AddressValidation": {
      "type": "object",
      "properties": {
        "decision": {
          "type": "string",
          "description": "Decision"
        },
        "errors": {
          "description": "List of errors",
          "$ref": "#/definitions/errorList",
          "originalRef": "errorList"
        },
        "suggestedAddresses": {
          "type": "array",
          "description": "List of suggested addresses",
          "items": {
            "$ref": "#/definitions/Address",
            "originalRef": "Address"
          }
        }
      },
      "title": "AddressValidation",
      "description": "Representation of an Address Validation"
    },
    "AdyenNotificationResponseWsDto": {
      "type": "object",
      "properties": {
        "notificationResponse": {
          "type": "string"
        }
      },
      "title": "AdyenNotificationResponseWsDto"
    },
    "Amount": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string"
        },
        "decimalValue": {
          "type": "number"
        },
        "value": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "Amount"
    },
    "BaseOption": {
      "type": "object",
      "properties": {
        "options": {
          "type": "array",
          "description": "List of all variant options",
          "items": {
            "$ref": "#/definitions/VariantOption",
            "originalRef": "VariantOption"
          }
        },
        "selected": {
          "description": "Variant option selected",
          "$ref": "#/definitions/VariantOption",
          "originalRef": "VariantOption"
        },
        "variantType": {
          "type": "string",
          "description": "Variant type of base option"
        }
      },
      "title": "BaseOption",
      "description": "Representation of a Base Ooption"
    },
    "BrandListWsDTO": {
      "type": "object",
      "properties": {
        "brands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BrandWsDto",
            "originalRef": "BrandWsDto"
          }
        }
      },
      "title": "BrandListWsDTO"
    },
    "BrandWsDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "BrandWsDto"
    },
    "Breadcrumb": {
      "type": "object",
      "properties": {
        "facetCode": {
          "type": "string",
          "description": "Code of the facet"
        },
        "facetName": {
          "type": "string",
          "description": "Name of the facet"
        },
        "facetValueCode": {
          "type": "string",
          "description": "Value code of the facet"
        },
        "facetValueName": {
          "type": "string",
          "description": "Value name of the facet"
        },
        "removeQuery": {
          "description": "Remove query",
          "$ref": "#/definitions/SearchState",
          "originalRef": "SearchState"
        },
        "truncateQuery": {
          "description": "Truncate query",
          "$ref": "#/definitions/SearchState",
          "originalRef": "SearchState"
        }
      },
      "title": "Breadcrumb",
      "description": "Representation of a Breadcrumb"
    },
    "CancelledEntriesDto": {
      "type": "object",
      "properties": {
        "cancelledEntriesData": {
          "xml": {
            "name": "cancelledEntriesData",
            "attribute": false,
            "wrapped": false
          }
        },
        "code": {
          "type": "string",
          "xml": {
            "name": "code",
            "attribute": false,
            "wrapped": false
          }
        },
        "concessionStoreRequest": {
          "type": "boolean"
        },
        "consignments": {
          "type": "array",
          "xml": {
            "name": "consignment",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/ConsignmentDto",
            "originalRef": "ConsignmentDto"
          }
        },
        "created": {
          "type": "string",
          "xml": {
            "name": "created",
            "attribute": false,
            "wrapped": false
          }
        },
        "currency": {
          "type": "string",
          "xml": {
            "name": "currency",
            "attribute": false,
            "wrapped": false
          }
        },
        "deliveryAddress": {
          "xml": {
            "name": "deliveryAddress",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/AddressDto",
          "originalRef": "AddressDto"
        },
        "deliveryCost": {
          "xml": {
            "name": "deliveryCost",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "deliveryCostWithoutTax": {
          "xml": {
            "name": "deliveryCostWithoutTax",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "deliveryMode": {
          "xml": {
            "name": "deliveryMode",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/DeliveryModeDto",
          "originalRef": "DeliveryModeDto"
        },
        "deliveryType": {
          "xml": {
            "name": "deliveryType",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/DeliveryTypeDto",
          "originalRef": "DeliveryTypeDto"
        },
        "entries": {
          "type": "array",
          "xml": {
            "name": "orderEntry",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/OrderEntryDto",
            "originalRef": "OrderEntryDto"
          }
        },
        "erpId": {
          "type": "string",
          "xml": {
            "name": "erpId",
            "attribute": false,
            "wrapped": false
          }
        },
        "fullGivexAmount": {
          "xml": {
            "name": "fullGivexAmount",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "giftCardSerialNumber": {
          "type": "string",
          "xml": {
            "name": "giftCardSerialNumber",
            "attribute": false,
            "wrapped": false
          }
        },
        "hasDigitalProduct": {
          "type": "boolean",
          "xml": {
            "name": "hasDigitalProduct",
            "attribute": false,
            "wrapped": false
          }
        },
        "hasPhysicalProduct": {
          "type": "boolean",
          "xml": {
            "name": "hasPhysicalProduct",
            "attribute": false,
            "wrapped": false
          }
        },
        "language": {
          "type": "string",
          "xml": {
            "name": "language",
            "attribute": false,
            "wrapped": false
          }
        },
        "legalEntity": {
          "xml": {
            "name": "legalEntity",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/LegalEntityDto",
          "originalRef": "LegalEntityDto"
        },
        "orderDiscounts": {
          "xml": {
            "name": "orderDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "orderNote": {
          "type": "string",
          "xml": {
            "name": "orderNote",
            "attribute": false,
            "wrapped": false
          }
        },
        "orderType": {
          "type": "string",
          "xml": {
            "name": "orderType",
            "attribute": false,
            "wrapped": false
          },
          "enum": [
            "ZWOR",
            "ZSD",
            "ZWRE",
            "ZWCR"
          ]
        },
        "originalOrderCode": {
          "type": "string",
          "xml": {
            "name": "originalOrderCode",
            "attribute": false,
            "wrapped": false
          }
        },
        "payerId": {
          "type": "string",
          "xml": {
            "name": "payerId",
            "attribute": false,
            "wrapped": false
          }
        },
        "paymentAddress": {
          "xml": {
            "name": "paymentAddress",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/AddressDto",
          "originalRef": "AddressDto"
        },
        "paymentMethod": {
          "type": "string",
          "xml": {
            "name": "paymentMethod",
            "attribute": false,
            "wrapped": false
          }
        },
        "paymentStatus": {
          "type": "string",
          "xml": {
            "name": "paymentStatus",
            "attribute": false,
            "wrapped": false
          }
        },
        "pricing": {
          "type": "string",
          "xml": {
            "name": "pricing",
            "attribute": false,
            "wrapped": false
          }
        },
        "productDiscounts": {
          "xml": {
            "name": "productDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "promotionGroups": {
          "type": "array",
          "xml": {
            "name": "promotionGroup",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "type": "string"
          }
        },
        "receiptNumber": {
          "type": "string",
          "xml": {
            "name": "receiptNumber",
            "attribute": false,
            "wrapped": false
          }
        },
        "refundedCrmVoucherValue": {
          "xml": {
            "name": "refundedCrmVoucherValue",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "xml": {
            "name": "requestedDeliveryDate",
            "attribute": false,
            "wrapped": false
          }
        },
        "returnRequestCompletionDate": {
          "type": "string",
          "xml": {
            "name": "returnRequestCompletionDate",
            "attribute": false,
            "wrapped": false
          }
        },
        "returnRequestNumber": {
          "type": "string",
          "xml": {
            "name": "returnRequestNumber",
            "attribute": false,
            "wrapped": false
          }
        },
        "returnRequestType": {
          "type": "string",
          "xml": {
            "name": "returnRequestType",
            "attribute": false,
            "wrapped": false
          }
        },
        "sendReturnRegistrationEmail": {
          "type": "boolean",
          "xml": {
            "name": "sendReturnRegistrationEmail",
            "attribute": false,
            "wrapped": false
          }
        },
        "shipToPartyCode": {
          "type": "string",
          "xml": {
            "name": "shipToPartyCode",
            "attribute": false,
            "wrapped": false
          }
        },
        "shippedEntriesData": {
          "xml": {
            "name": "shippedEntriesData",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/ShippedEntriesDto",
          "originalRef": "ShippedEntriesDto"
        },
        "shippingTaxes": {
          "type": "array",
          "xml": {
            "name": "tax",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/TaxDto",
            "originalRef": "TaxDto"
          }
        },
        "site": {
          "type": "string",
          "xml": {
            "name": "site",
            "attribute": false,
            "wrapped": false
          }
        },
        "soldToCountryCode": {
          "type": "string",
          "xml": {
            "name": "soldToCountryCode",
            "attribute": false,
            "wrapped": false
          }
        },
        "soldToPartyCode": {
          "type": "string",
          "xml": {
            "name": "soldToPartyCode",
            "attribute": false,
            "wrapped": false
          }
        },
        "status": {
          "type": "string",
          "xml": {
            "name": "status",
            "attribute": false,
            "wrapped": false
          }
        },
        "subTotal": {
          "xml": {
            "name": "subTotal",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "subTotalWithoutOrderDiscounts": {
          "xml": {
            "name": "subTotalWithoutOrderDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "subTotalWithoutTotalDiscounts": {
          "xml": {
            "name": "subTotalWithoutTotalDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "taxExempt": {
          "type": "boolean",
          "xml": {
            "name": "taxExempt",
            "attribute": false,
            "wrapped": false
          }
        },
        "taxExemptCertificateNumber": {
          "type": "string",
          "xml": {
            "name": "taxExemptCertificateNumber",
            "attribute": false,
            "wrapped": false
          }
        },
        "totalDiscounts": {
          "xml": {
            "name": "totalDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalPrice": {
          "xml": {
            "name": "totalPrice",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalPriceWithTax": {
          "xml": {
            "name": "totalPriceWithTax",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalPriceWithTaxWithAppliedGiftCardValue": {
          "xml": {
            "name": "totalPriceWithTaxWithAppliedGiftCardValue",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalShippingTax": {
          "xml": {
            "name": "totalShippingTax",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalShippingTaxPercentage": {
          "type": "number",
          "format": "double",
          "xml": {
            "name": "totalShippingTaxPercentage",
            "attribute": false,
            "wrapped": false
          }
        },
        "totalTax": {
          "xml": {
            "name": "totalTax",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalTaxPercentage": {
          "type": "number",
          "format": "double",
          "xml": {
            "name": "totalTaxPercentage",
            "attribute": false,
            "wrapped": false
          }
        },
        "totalTaxes": {
          "type": "array",
          "xml": {
            "name": "tax",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/TaxDto",
            "originalRef": "TaxDto"
          }
        },
        "update": {
          "type": "boolean",
          "xml": {
            "name": "update",
            "attribute": false,
            "wrapped": false
          }
        },
        "urlPrefix": {
          "type": "string",
          "xml": {
            "name": "urlPrefix",
            "attribute": false,
            "wrapped": false
          }
        },
        "useInternalTaxCalculationFallback": {
          "type": "boolean",
          "xml": {
            "name": "useInternalTaxCalculationFallback",
            "attribute": false,
            "wrapped": false
          }
        },
        "usedGivexAmount": {
          "xml": {
            "name": "usedGivexAmount",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "user": {
          "xml": {
            "name": "user",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/UserDto",
          "originalRef": "UserDto"
        },
        "voucherDiscount": {
          "xml": {
            "name": "voucherDiscount",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        }
      },
      "title": "CancelledEntriesDto"
    },
    "CardType": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Card type code"
        },
        "name": {
          "type": "string",
          "description": "Card type name"
        }
      },
      "title": "CardType",
      "description": "Representation of a Card Type"
    },
    "CardTypeList": {
      "type": "object",
      "properties": {
        "cardTypes": {
          "type": "array",
          "description": "List of card types",
          "items": {
            "$ref": "#/definitions/CardType",
            "originalRef": "CardType"
          }
        }
      },
      "title": "CardTypeList",
      "description": "Representation of a Card Type List"
    },
    "Cart": {
      "type": "object",
      "properties": {
        "appliedCrmVoucherValue": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "appliedGiftCardValue": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "appliedOrderPromotions": {
          "type": "array",
          "description": "List of applied order promotions",
          "items": {
            "$ref": "#/definitions/PromotionResult",
            "originalRef": "PromotionResult"
          }
        },
        "appliedProductPromotions": {
          "type": "array",
          "description": "List of applied product promotions",
          "items": {
            "$ref": "#/definitions/PromotionResult",
            "originalRef": "PromotionResult"
          }
        },
        "appliedVouchers": {
          "type": "array",
          "description": "List of applied vouchers",
          "items": {
            "$ref": "#/definitions/Voucher",
            "originalRef": "Voucher"
          }
        },
        "calculated": {
          "type": "boolean",
          "description": "Flag showing if order is calculated"
        },
        "cartIncludesDigitalProduct": {
          "type": "boolean"
        },
        "cartIncludesNonDigitalProduct": {
          "type": "boolean"
        },
        "code": {
          "type": "string",
          "description": "Code number of order"
        },
        "crmVoucherUsed": {
          "type": "boolean"
        },
        "customerCrmVoucherBalance": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "customerDetails": {
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        },
        "deliveryAddress": {
          "description": "Delivery address",
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        },
        "deliveryCost": {
          "description": "Delivery cost",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "deliveryItemsQuantity": {
          "type": "integer",
          "format": "int64",
          "description": "Quantity of delivery items"
        },
        "deliveryMode": {
          "description": "Delivery mode information",
          "$ref": "#/definitions/DeliveryMode",
          "originalRef": "DeliveryMode"
        },
        "deliveryModeType": {
          "type": "string"
        },
        "deliveryOrderGroups": {
          "type": "array",
          "description": "List of delivery order entries group",
          "items": {
            "$ref": "#/definitions/DeliveryOrderEntryGroup",
            "originalRef": "DeliveryOrderEntryGroup"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of the cart"
        },
        "entries": {
          "type": "array",
          "description": "List of order entries",
          "items": {
            "$ref": "#/definitions/OrderEntry",
            "originalRef": "OrderEntry"
          }
        },
        "entryGroups": {
          "type": "array",
          "description": "List of entry groups",
          "items": {
          }
        },
        "expirationTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date of cart expiration time"
        },
        "giftMessage": {
          "$ref": "#/definitions/ServiceProductOrderEntryWsDTO",
          "originalRef": "ServiceProductOrderEntryWsDTO"
        },
        "grandTotalExclTax": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "guid": {
          "type": "string",
          "description": "Guest user id identifier"
        },
        "loyaltyPoints": {
          "type": "number",
          "format": "double"
        },
        "name": {
          "type": "string",
          "description": "Name of the cart"
        },
        "net": {
          "type": "boolean",
          "description": "Flag stating iv value is net-value"
        },
        "orderDiscounts": {
          "description": "Order discounts",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "orderNote": {
          "type": "string"
        },
        "paymentAddress": {
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        },
        "paymentInfo": {
          "description": "Payment information",
          "$ref": "#/definitions/PaymentDetails",
          "originalRef": "PaymentDetails"
        },
        "pickupItemsQuantity": {
          "type": "integer",
          "format": "int64",
          "description": "Quantity of pickup items"
        },
        "pickupOrderGroups": {
          "type": "array",
          "description": "List of pickup order entry group",
          "items": {
            "$ref": "#/definitions/PickupOrderEntryGroup",
            "originalRef": "PickupOrderEntryGroup"
          }
        },
        "potentialOrderPromotions": {
          "type": "array",
          "description": "List of potential order promotions for cart",
          "items": {
            "$ref": "#/definitions/PromotionResult",
            "originalRef": "PromotionResult"
          }
        },
        "potentialProductPromotions": {
          "type": "array",
          "description": "List of potential product promotions for cart",
          "items": {
            "$ref": "#/definitions/PromotionResult",
            "originalRef": "PromotionResult"
          }
        },
        "productDiscounts": {
          "description": "Product discounts",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "receiptNumber": {
          "type": "string"
        },
        "removedProducts": {
          "type": "array",
          "items": {
          }
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date-time"
        },
        "saveTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date of saving cart"
        },
        "savedBy": {
          "description": "Information about person who saved cart",
          "$ref": "#/definitions/Principal",
          "originalRef": "Principal"
        },
        "site": {
          "type": "string",
          "description": "Site"
        },
        "store": {
          "type": "string",
          "description": "Store"
        },
        "subTotal": {
          "description": "Subtotal price",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "subTotalWithoutDiscounts": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "taxExempt": {
          "type": "boolean"
        },
        "taxExemptCertificateNumber": {
          "type": "string"
        },
        "totalDiscounts": {
          "description": "Total discounts",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalDiscountsWithoutPromoCode": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalDiscountsWithoutPromoCodeAndVoucher": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalDiscountsWithoutVoucher": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalItems": {
          "type": "integer",
          "format": "int32"
        },
        "totalPrice": {
          "description": "Total price value",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalPriceWithTax": {
          "description": "Total price with tax",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalPriceWithoutAppliedGiftCardValue": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalTax": {
          "description": "Total tax price",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalUnitCount": {
          "type": "integer",
          "format": "int32",
          "description": "Total unit count"
        },
        "urlPrefix": {
          "type": "string"
        },
        "useInternalTaxCalculationFallback": {
          "type": "boolean"
        },
        "user": {
          "description": "User information",
          "$ref": "#/definitions/Principal",
          "originalRef": "Principal"
        }
      },
      "title": "Cart",
      "description": "Representation of a Cart"
    },
    "CartList": {
      "type": "object",
      "properties": {
        "carts": {
          "type": "array",
          "description": "List of carts",
          "items": {
            "$ref": "#/definitions/Cart",
            "originalRef": "Cart"
          }
        }
      },
      "title": "CartList",
      "description": "Representation of a Cart list"
    },
    "CartModification": {
      "type": "object",
      "properties": {
        "deliveryModeChanged": {
          "type": "boolean",
          "description": "Delivery mode changed"
        },
        "entry": {
          "description": "Order entry",
          "$ref": "#/definitions/OrderEntry",
          "originalRef": "OrderEntry"
        },
        "quantity": {
          "type": "integer",
          "format": "int64",
          "description": "Final quantity after cart modification"
        },
        "quantityAdded": {
          "type": "integer",
          "format": "int64",
          "description": "Quantity added with cart modification"
        },
        "statusCode": {
          "type": "string",
          "description": "Status code of cart modification"
        },
        "statusMessage": {
          "type": "string",
          "description": "Status message"
        },
        "totalUnitCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "CartModification",
      "description": "Representation of a Cart modification"
    },
    "Catalog": {
      "type": "object",
      "properties": {
        "catalogVersions": {
          "type": "array",
          "description": "List of versions of catalog",
          "items": {
            "$ref": "#/definitions/CatalogVersion",
            "originalRef": "CatalogVersion"
          }
        },
        "id": {
          "type": "string",
          "description": "Identifier of abstract catalog item"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "description": "Date of last modification"
        },
        "name": {
          "type": "string",
          "description": "Name of abstract catalog item"
        },
        "url": {
          "type": "string",
          "description": "Url address of abstract catalog item"
        }
      },
      "title": "Catalog",
      "description": "Representation of an Catalog"
    },
    "CatalogList": {
      "type": "object",
      "properties": {
        "catalogs": {
          "type": "array",
          "description": "List of catalog items",
          "items": {
            "$ref": "#/definitions/Catalog",
            "originalRef": "Catalog"
          }
        }
      },
      "title": "CatalogList",
      "description": "Representation of a Catalog List"
    },
    "CatalogVersion": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "description": "List of category hierarchies",
          "items": {
          }
        },
        "id": {
          "type": "string",
          "description": "Identifier of abstract catalog item"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "description": "Date of last modification"
        },
        "name": {
          "type": "string",
          "description": "Name of abstract catalog item"
        },
        "url": {
          "type": "string",
          "description": "Url address of abstract catalog item"
        }
      },
      "title": "CatalogVersion",
      "description": "Representation of a Catalog Version"
    },
    "Category": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Code of the category"
        },
        "image": {
          "description": "Category image",
          "$ref": "#/definitions/Image",
          "originalRef": "Image"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "url": {
          "type": "string",
          "description": "URL of the category"
        }
      },
      "title": "Category",
      "description": "Representation of a Category"
    },
    "CategoryHierarchy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of abstract catalog item"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "description": "Date of last modification"
        },
        "name": {
          "type": "string",
          "description": "Name of abstract catalog item"
        },
        "subcategories": {
          "type": "array",
          "description": "List of subcategory hierarchies",
          "items": {
          }
        },
        "url": {
          "type": "string",
          "description": "Url address of abstract catalog item"
        }
      },
      "title": "CategoryHierarchy",
      "description": "Representation of a Category Hierarchy"
    },
    "Classification": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Code of the classification"
        },
        "features": {
          "type": "array",
          "description": "List of features for given classification",
          "items": {
            "$ref": "#/definitions/Feature",
            "originalRef": "Feature"
          }
        },
        "name": {
          "type": "string",
          "description": "Name of the classification"
        }
      },
      "title": "Classification",
      "description": "Representation of a Classification"
    },
    "ClassificationAttributeListWsDTO": {
      "type": "object",
      "properties": {
        "classificationAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClassificationAttributeWsDTO",
            "originalRef": "ClassificationAttributeWsDTO"
          }
        }
      },
      "title": "ClassificationAttributeListWsDTO"
    },
    "ClassificationAttributeValueWsDTO": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "title": "ClassificationAttributeValueWsDTO"
    },
    "ClassificationAttributeWsDTO": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClassificationAttributeValueWsDTO",
            "originalRef": "ClassificationAttributeValueWsDTO"
          }
        }
      },
      "title": "ClassificationAttributeWsDTO"
    },
    "CollectionListWsDTO": {
      "type": "object",
      "properties": {
        "collections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CollectionWsDto",
            "originalRef": "CollectionWsDto"
          }
        }
      },
      "title": "CollectionListWsDTO"
    },
    "CollectionWsDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "CollectionWsDto"
    },
    "ColorListWsDTO": {
      "type": "object",
      "properties": {
        "colors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ColorWsDto",
            "originalRef": "ColorWsDto"
          }
        }
      },
      "title": "ColorListWsDTO"
    },
    "ColorWsDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "simplifiedColorCode": {
          "type": "string"
        }
      },
      "title": "ColorWsDto"
    },
    "ConcessionStoresListWsDto": {
      "type": "object",
      "properties": {
        "concessionStores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConcessionStoresResultWsDto",
            "originalRef": "ConcessionStoresResultWsDto"
          }
        }
      },
      "title": "ConcessionStoresListWsDto"
    },
    "ConcessionStoresResultWsDto": {
      "type": "object",
      "properties": {
        "availableLanguages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "baseSite": {
          "type": "string"
        },
        "concessionStore": {
          "type": "string"
        },
        "defaultLanguage": {
          "type": "string"
        }
      },
      "title": "ConcessionStoresResultWsDto"
    },
    "ConfigurationInfo": {
      "type": "object",
      "properties": {
        "configurationLabel": {
          "type": "string",
          "description": "Label of configuration info"
        },
        "configurationValue": {
          "type": "string",
          "description": "Value of configuration info"
        },
        "configuratorType": {
          "type": "string",
          "description": "Type of configuration info"
        },
        "status": {
          "type": "string",
          "description": "Status of configuration info"
        }
      },
      "title": "ConfigurationInfo",
      "description": "Representation of a Configuration Info"
    },
    "Consignment": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Consignment code"
        },
        "deliveryPointOfService": {
          "description": "Delivery point of service",
          "$ref": "#/definitions/PointOfService",
          "originalRef": "PointOfService"
        },
        "entries": {
          "type": "array",
          "description": "List of consignment entries",
          "items": {
            "$ref": "#/definitions/ConsignmentEntry",
            "originalRef": "ConsignmentEntry"
          }
        },
        "shippingAddress": {
          "description": "Shipping address",
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        },
        "status": {
          "type": "string",
          "description": "Consignment status"
        },
        "statusDate": {
          "type": "string",
          "format": "date-time",
          "description": "Consignment status date"
        },
        "statusDisplay": {
          "type": "string",
          "description": "Consignment status display"
        },
        "trackingID": {
          "type": "string",
          "description": "Consignment tracking identifier"
        }
      },
      "title": "Consignment",
      "description": "Representation of a Consignment"
    },
    "ConsignmentDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "xml": {
            "name": "code",
            "attribute": false,
            "wrapped": false
          }
        },
        "deliveryMode": {
          "xml": {
            "name": "deliveryMode",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/DeliveryModeDto",
          "originalRef": "DeliveryModeDto"
        },
        "entries": {
          "type": "array",
          "xml": {
            "name": "consignmentEntry",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/ConsignmentEntryDto",
            "originalRef": "ConsignmentEntryDto"
          }
        },
        "shippingDate": {
          "type": "string",
          "xml": {
            "name": "shippingDate",
            "attribute": false,
            "wrapped": false
          }
        },
        "status": {
          "type": "string",
          "xml": {
            "name": "status",
            "attribute": false,
            "wrapped": false
          }
        },
        "trackingNumber": {
          "type": "string",
          "xml": {
            "name": "trackingNumber",
            "attribute": false,
            "wrapped": false
          }
        }
      },
      "title": "ConsignmentDto"
    },
    "ConsignmentEntry": {
      "type": "object",
      "properties": {
        "orderEntry": {
          "description": "Order entry of Consignment entry",
          "$ref": "#/definitions/OrderEntry",
          "originalRef": "OrderEntry"
        },
        "quantity": {
          "type": "integer",
          "format": "int64",
          "description": "Quantity value of Consignment entry"
        },
        "shippedQuantity": {
          "type": "integer",
          "format": "int64",
          "description": "Shipped quantity"
        }
      },
      "title": "ConsignmentEntry",
      "description": "Representation of a Consignment Entry"
    },
    "ConsignmentEntryDto": {
      "type": "object",
      "properties": {
        "entryNumber": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "entryNumber",
            "attribute": false,
            "wrapped": false
          }
        },
        "shippedQuantity": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "shippedQuantity",
            "attribute": false,
            "wrapped": false
          }
        }
      },
      "title": "ConsignmentEntryDto"
    },
    "CostDto": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string",
          "xml": {
            "name": "currency",
            "attribute": false,
            "wrapped": false
          }
        },
        "value": {
          "type": "number",
          "xml": {
            "name": "value",
            "attribute": false,
            "wrapped": false
          }
        }
      },
      "title": "CostDto"
    },
    "Country": {
      "type": "object",
      "properties": {
        "isocode": {
          "type": "string",
          "description": "Country code in iso format"
        },
        "name": {
          "type": "string",
          "description": "Name of the country"
        }
      },
      "title": "Country",
      "description": "Response body fields which will be returned while fetching the list of countries. The DTO is in XML or .json format"
    },
    "CountryDto": {
      "type": "object",
      "properties": {
        "isoCode": {
          "type": "string",
          "xml": {
            "name": "isoCode",
            "attribute": false,
            "wrapped": false
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "name": "name",
            "attribute": false,
            "wrapped": false
          }
        }
      },
      "title": "CountryDto"
    },
    "CountryList": {
      "type": "object",
      "properties": {
        "countries": {
          "type": "array",
          "description": "This is the list of Country fields that should be returned in the response body",
          "items": {
            "$ref": "#/definitions/Country",
            "originalRef": "Country"
          }
        }
      },
      "title": "CountryList",
      "description": "List of countries"
    },
    "CoveoProductData": {
      "type": "object",
      "properties": {
        "approvalstatus": {
          "type": "string"
        },
        "averagerating": {
          "type": "number",
          "format": "double"
        },
        "brandcode": {
          "type": "string"
        },
        "brandname": {
          "type": "string"
        },
        "canonicalcategoryhierarchy": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "categoryhierarchy": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_activity": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_banding": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_bladeedge": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_bladestyle": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_boxed": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_carrytype": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_category": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_collaborator": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_collection": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_color": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_colour": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_cuttingcapacity": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_design": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_engravingproducttype": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_engravingtype": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_exclusive": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_feature": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_features": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_finish": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_keyfeatures": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_limitededition": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_locktype": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_madeinengland": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_madeinireland": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_maincolour": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_material": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_occasion": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_patterntags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_productbrand": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_productcategorytype": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_productcollection": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_productdesigner": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_productfunctions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_productgenerictype": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_productmaterial": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_productspecifictype": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_producttype": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_punchsize": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_punchtype": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_roomstyle": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_roomtype": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_rotarybladesize": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_servicesize": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_sheath": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_spareparts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_specialedition": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_steeltype": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_style": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_type": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_weight": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classification_whatyourecutting": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "collectioncode": {
          "type": "string"
        },
        "collectionname": {
          "type": "string"
        },
        "colorcode": {
          "type": "string"
        },
        "colorname": {
          "type": "string"
        },
        "customizable": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "designername": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "documentid": {
          "type": "string"
        },
        "eanorupc": {
          "type": "string"
        },
        "engravings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "featuredescription": {
          "type": "string"
        },
        "fileextension": {
          "type": "string"
        },
        "giftwrappings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "imageurl": {
          "type": "string"
        },
        "isvisible": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "material": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadescription": {
          "type": "string"
        },
        "multibuypromotions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "notshippedto": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "objecttype": {
          "type": "string"
        },
        "onlinefrom": {
          "type": "string"
        },
        "onlyavailableto": {
          "type": "string"
        },
        "packaging_depth": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "float"
          }
        },
        "packaging_height": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "float"
          }
        },
        "packaging_length": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "float"
          }
        },
        "packaging_length_unit": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "packaging_volume": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "float"
          }
        },
        "packaging_volume_unit": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "packaging_weight": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "float"
          }
        },
        "packaging_weight_unit": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "packaging_width": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "float"
          }
        },
        "patterncode": {
          "type": "string"
        },
        "permanentid": {
          "type": "string"
        },
        "price_currency": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "price_discounted": {
          "type": "object",
          "additionalProperties": {
            "type": "number"
          }
        },
        "price_discounted_1001": {
          "type": "object",
          "additionalProperties": {
            "type": "number"
          }
        },
        "price_discounted_1002": {
          "type": "object",
          "additionalProperties": {
            "type": "number"
          }
        },
        "price_discounted_1003": {
          "type": "object",
          "additionalProperties": {
            "type": "number"
          }
        },
        "price_discounted_2001": {
          "type": "object",
          "additionalProperties": {
            "type": "number"
          }
        },
        "price_discounted_3001": {
          "type": "object",
          "additionalProperties": {
            "type": "number"
          }
        },
        "price_regular": {
          "type": "object",
          "additionalProperties": {
            "type": "number"
          }
        },
        "price_regular_1001": {
          "type": "object",
          "additionalProperties": {
            "type": "number"
          }
        },
        "price_regular_1002": {
          "type": "object",
          "additionalProperties": {
            "type": "number"
          }
        },
        "price_regular_1003": {
          "type": "object",
          "additionalProperties": {
            "type": "number"
          }
        },
        "price_regular_2001": {
          "type": "object",
          "additionalProperties": {
            "type": "number"
          }
        },
        "price_regular_3001": {
          "type": "object",
          "additionalProperties": {
            "type": "number"
          }
        },
        "product_depth": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "float"
          }
        },
        "product_height": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "float"
          }
        },
        "product_length": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "float"
          }
        },
        "product_length_unit": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "product_volume": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "float"
          }
        },
        "product_volume_unit": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "product_weight": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "float"
          }
        },
        "product_weight_unit": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "product_width": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "float"
          }
        },
        "productcarelistfalse": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "productcarelisttrue": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "productid": {
          "type": "string"
        },
        "productpromotions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "purchasable": {
          "type": "string"
        },
        "recipeid": {
          "type": "string"
        },
        "saleschannel": {
          "type": "string"
        },
        "shortname": {
          "type": "string"
        },
        "simplifiedcolorcode": {
          "type": "string"
        },
        "simplifiedcolorname": {
          "type": "string"
        },
        "stock": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "tagcode": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tagname": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variantgroupcode": {
          "type": "string"
        },
        "variantname": {
          "type": "string"
        },
        "variants": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "CoveoProductData"
    },
    "CreateCartEntryWithServiceProductsWsDTO": {
      "type": "object",
      "properties": {
        "pickupStore": {
          "type": "string"
        },
        "productCode": {
          "type": "string"
        },
        "qty": {
          "type": "integer",
          "format": "int64"
        },
        "serviceProducts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceProductEntryWsDTO",
            "originalRef": "ServiceProductEntryWsDTO"
          }
        }
      },
      "title": "CreateCartEntryWithServiceProductsWsDTO"
    },
    "CrmStockListWsDTO": {
      "type": "object",
      "properties": {
        "crmStocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CrmStockWsDTO",
            "originalRef": "CrmStockWsDTO"
          }
        }
      },
      "title": "CrmStockListWsDTO"
    },
    "CrmStockWsDTO": {
      "type": "object",
      "properties": {
        "productCode": {
          "type": "string"
        },
        "stockLevel": {
          "type": "integer",
          "format": "int64"
        },
        "stockLevelStatus": {
          "type": "string"
        }
      },
      "title": "CrmStockWsDTO"
    },
    "Currency": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Boolean flag whether currency is active"
        },
        "isocode": {
          "type": "string",
          "description": "Code of the currency in iso format"
        },
        "name": {
          "type": "string",
          "description": "Name of the currency"
        },
        "symbol": {
          "type": "string",
          "description": "Symbol of the currency"
        }
      },
      "title": "Currency",
      "description": "Representation of a Currency"
    },
    "CurrencyList": {
      "type": "object",
      "properties": {
        "currencies": {
          "type": "array",
          "description": "List of currencies",
          "items": {
            "$ref": "#/definitions/Currency",
            "originalRef": "Currency"
          }
        }
      },
      "title": "CurrencyList",
      "description": "Representation of a Currency List"
    },
    "CustomerInformationWsDTO": {
      "type": "object",
      "properties": {
        "customerDetails": {
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        },
        "paymentAddress": {
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        }
      },
      "title": "CustomerInformationWsDTO"
    },
    "DeliveryMode": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Code of the delivery mode"
        },
        "deliveryCost": {
          "description": "Cost of the delivery",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "deliveryModeReason": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Description of the delivery mode"
        },
        "name": {
          "type": "string",
          "description": "Name of the delivery mode"
        }
      },
      "title": "DeliveryMode",
      "description": "Representation of a Delivery mode"
    },
    "DeliveryModeDto": {
      "type": "object",
      "properties": {
        "carrierId": {
          "type": "string",
          "xml": {
            "name": "carrierId",
            "attribute": false,
            "wrapped": false
          }
        },
        "deliveryModeId": {
          "type": "string",
          "xml": {
            "name": "deliveryModeId",
            "attribute": false,
            "wrapped": false
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "name": "name",
            "attribute": false,
            "wrapped": false
          }
        },
        "shipmentMethodId": {
          "type": "string",
          "xml": {
            "name": "shipmentMethodId",
            "attribute": false,
            "wrapped": false
          }
        }
      },
      "title": "DeliveryModeDto"
    },
    "DeliveryModeList": {
      "type": "object",
      "properties": {
        "deliveryModes": {
          "type": "array",
          "description": "List of delivery modes",
          "items": {
            "$ref": "#/definitions/DeliveryMode",
            "originalRef": "DeliveryMode"
          }
        }
      },
      "title": "DeliveryModeList",
      "description": "Representation of a Delivery mode list"
    },
    "DeliveryOrderEntryGroup": {
      "type": "object",
      "properties": {
        "deliveryAddress": {
          "description": "Delivery address for order entry group",
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        },
        "entries": {
          "type": "array",
          "description": "List of order entries",
          "items": {
            "$ref": "#/definitions/OrderEntry",
            "originalRef": "OrderEntry"
          }
        },
        "quantity": {
          "type": "integer",
          "format": "int64",
          "description": "Quantity of order entries in a group"
        },
        "totalPriceWithTax": {
          "description": "Total price with tax",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        }
      },
      "title": "DeliveryOrderEntryGroup",
      "description": "Representation of a Delivery Order Entry Group"
    },
    "DeliveryToStoreWsDTO": {
      "type": "object",
      "properties": {
        "customerDetails": {
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        }
      },
      "title": "DeliveryToStoreWsDTO"
    },
    "DeliveryTypeDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "xml": {
            "name": "code",
            "attribute": false,
            "wrapped": false
          }
        },
        "name": {
          "type": "string"
        }
      },
      "title": "DeliveryTypeDto"
    },
    "DesignerListWsDTO": {
      "type": "object",
      "properties": {
        "designerCodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DesignerWsDto",
            "originalRef": "DesignerWsDto"
          }
        }
      },
      "title": "DesignerListWsDTO"
    },
    "DesignerWsDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "DesignerWsDto"
    },
    "DimensionsEntryWsDto": {
      "type": "object",
      "properties": {
        "depth": {
          "type": "number",
          "format": "float"
        },
        "dimensionSystem": {
          "type": "string",
          "enum": [
            "METRICS",
            "IMPERIAL_UK",
            "IMPERIAL_US"
          ]
        },
        "height": {
          "type": "number",
          "format": "float"
        },
        "length": {
          "type": "number",
          "format": "float"
        },
        "lengthUnit": {
          "type": "string"
        },
        "volume": {
          "type": "number",
          "format": "float"
        },
        "volumeUnit": {
          "type": "string"
        },
        "weight": {
          "type": "number",
          "format": "float"
        },
        "weightUnit": {
          "type": "string"
        },
        "width": {
          "type": "number",
          "format": "float"
        }
      },
      "title": "DimensionsEntryWsDto"
    },
    "DimensionsWsDto": {
      "type": "object",
      "properties": {
        "packagingDimensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DimensionsEntryWsDto",
            "originalRef": "DimensionsEntryWsDto"
          }
        },
        "productDimensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DimensionsEntryWsDto",
            "originalRef": "DimensionsEntryWsDto"
          }
        }
      },
      "title": "DimensionsWsDto"
    },
    "DiscountDto": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string",
          "xml": {
            "name": "currency",
            "attribute": false,
            "wrapped": false
          }
        },
        "reason": {
          "type": "string",
          "xml": {
            "name": "reason",
            "attribute": false,
            "wrapped": false
          }
        },
        "value": {
          "type": "number",
          "xml": {
            "name": "value",
            "attribute": false,
            "wrapped": false
          }
        }
      },
      "title": "DiscountDto"
    },
    "EntryGroup": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "description": "List of order entries",
          "items": {
            "$ref": "#/definitions/OrderEntry",
            "originalRef": "OrderEntry"
          }
        },
        "entryGroupNumber": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Identifier of the entry group"
        },
        "entryGroups": {
          "type": "array",
          "description": "List of child entry groups",
          "items": {
          }
        },
        "erroneous": {
          "type": "boolean",
          "example": true,
          "description": "Indicates if the entry group is in an error state"
        },
        "label": {
          "type": "string",
          "example": "Photo On The Go Package",
          "description": "Label for the entry group"
        },
        "type": {
          "type": "string",
          "example": "STANDALONE",
          "description": "Indicates type of the group, possible values are STANDALONE, CONFIGURABLEBUNDLE or any customer implemented type for any new provider"
        }
      },
      "title": "EntryGroup",
      "description": "Representation of an Entry Group"
    },
    "ExtendedDeliveryCostWsDTO": {
      "type": "object",
      "properties": {
        "currencyIso": {
          "type": "string"
        },
        "deliveryType": {
          "type": "string",
          "enum": [
            "HOME_DELIVERY",
            "PICKUP_LOCATION_DELIVERY",
            "STORE_DELIVERY"
          ]
        },
        "formattedValue": {
          "type": "string"
        },
        "priceType": {
          "type": "string",
          "enum": [
            "BUY",
            "FROM"
          ]
        },
        "value": {
          "type": "number"
        }
      },
      "title": "ExtendedDeliveryCostWsDTO"
    },
    "ExtendedDeliveryModeListWsDTO": {
      "type": "object",
      "properties": {
        "extendedDeliveryModes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedDeliveryModeWsDTO",
            "originalRef": "ExtendedDeliveryModeWsDTO"
          }
        }
      },
      "title": "ExtendedDeliveryModeListWsDTO"
    },
    "ExtendedDeliveryModeWsDTO": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "deliveryModeReason": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "extendedDeliveryCosts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedDeliveryCostWsDTO",
            "originalRef": "ExtendedDeliveryCostWsDTO"
          }
        },
        "name": {
          "type": "string"
        },
        "supportsPickupLocation": {
          "type": "boolean"
        },
        "supportsStoreDelivery": {
          "type": "boolean"
        }
      },
      "title": "ExtendedDeliveryModeWsDTO"
    },
    "Facet": {
      "type": "object",
      "properties": {
        "category": {
          "type": "boolean",
          "description": "Flag stating if facet is category facet"
        },
        "multiSelect": {
          "type": "boolean",
          "description": "Flag stating if facet is multiSelect"
        },
        "name": {
          "type": "string",
          "description": "Name of the facet"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "Priority value of the facet"
        },
        "topValues": {
          "type": "array",
          "description": "List of top facet values",
          "items": {
            "$ref": "#/definitions/FacetValue",
            "originalRef": "FacetValue"
          }
        },
        "values": {
          "type": "array",
          "description": "List of all facet values",
          "items": {
            "$ref": "#/definitions/FacetValue",
            "originalRef": "FacetValue"
          }
        },
        "visible": {
          "type": "boolean",
          "description": "Flag stating if facet is visible"
        }
      },
      "title": "Facet",
      "description": "Representation of a Facet"
    },
    "FacetValue": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Count of the facet value"
        },
        "name": {
          "type": "string",
          "description": "Name of the facet value"
        },
        "query": {
          "description": "Query of the facet value",
          "$ref": "#/definitions/SearchState",
          "originalRef": "SearchState"
        },
        "selected": {
          "type": "boolean",
          "description": "Flag stating if facet value is selected"
        }
      },
      "title": "FacetValue",
      "description": "Representation of a Facet Value"
    },
    "Feature": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Code of the feature"
        },
        "comparable": {
          "type": "boolean",
          "description": "Flag defining it feature is comparable"
        },
        "description": {
          "type": "string",
          "description": "Description of the feature"
        },
        "featureUnit": {
          "description": "Feature unit",
          "$ref": "#/definitions/FeatureUnit",
          "originalRef": "FeatureUnit"
        },
        "featureValues": {
          "type": "array",
          "description": "List of feature values",
          "items": {
            "$ref": "#/definitions/FeatureValue",
            "originalRef": "FeatureValue"
          }
        },
        "name": {
          "type": "string",
          "description": "Name of the feature"
        },
        "range": {
          "type": "boolean",
          "description": "Range number of the reature"
        },
        "type": {
          "type": "string",
          "description": "Type of the feature"
        }
      },
      "title": "Feature",
      "description": "Representation of a Feature"
    },
    "FeatureUnit": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the feature unit"
        },
        "symbol": {
          "type": "string",
          "description": "Symbol of the feature unit"
        },
        "unitType": {
          "type": "string",
          "description": "Type of the feature unit"
        }
      },
      "title": "FeatureUnit",
      "description": "Representation of a Feature Unit"
    },
    "FeatureValue": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Value of the feature"
        }
      },
      "title": "FeatureValue",
      "description": "Representation of a Feature Value"
    },
    "FeatureValueToProductsMappingDataWsDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "optionAvailable": {
          "type": "boolean"
        },
        "productCodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "selected": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        }
      },
      "title": "FeatureValueToProductsMappingDataWsDto"
    },
    "FeaturesToFeatureValueMappingDataWsDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "featureValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeatureValueToProductsMappingDataWsDto",
            "originalRef": "FeatureValueToProductsMappingDataWsDto"
          }
        },
        "name": {
          "type": "string"
        },
        "position": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "FeaturesToFeatureValueMappingDataWsDto"
    },
    "FiskarsModificationResult": {
      "type": "object",
      "properties": {
        "additionalData": {
          "type": "string"
        },
        "pspReference": {
          "type": "string"
        },
        "response": {
          "type": "string",
          "enum": [
            "[capture-received]",
            "[cancel-received]",
            "[refund-received]",
            "[cancelOrRefund-received]",
            "[adjustAuthorisation-received]"
          ]
        }
      },
      "title": "FiskarsModificationResult"
    },
    "FontOptionListWsDTO": {
      "type": "object",
      "properties": {
        "fontOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FontOptionWsDto",
            "originalRef": "FontOptionWsDto"
          }
        }
      },
      "title": "FontOptionListWsDTO"
    },
    "FontOptionWsDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "FontOptionWsDto"
    },
    "FraudCheckResult": {
      "type": "object",
      "properties": {
        "accountScore": {
          "type": "integer",
          "format": "int32"
        },
        "checkId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "FraudCheckResult"
    },
    "FraudCheckResultContainer": {
      "type": "object",
      "properties": {
        "fraudCheckResult": {
          "$ref": "#/definitions/FraudCheckResult",
          "originalRef": "FraudCheckResult"
        }
      },
      "title": "FraudCheckResultContainer"
    },
    "FraudResult": {
      "type": "object",
      "properties": {
        "accountScore": {
          "type": "integer",
          "format": "int32"
        },
        "fraudCheckResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FraudCheckResult",
            "originalRef": "FraudCheckResult"
          }
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FraudCheckResultContainer",
            "originalRef": "FraudCheckResultContainer"
          }
        }
      },
      "title": "FraudResult"
    },
    "FutureStock": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "Date of future stock"
        },
        "formattedDate": {
          "type": "string",
          "description": "Date of future stock expressed in text value"
        },
        "stock": {
          "description": "Stock information of future stock",
          "$ref": "#/definitions/Stock",
          "originalRef": "Stock"
        }
      },
      "title": "FutureStock",
      "description": "Representation of a Future Stock"
    },
    "GeoPoint": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "Geopoint latitude"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "Geopoint longitude"
        }
      },
      "title": "GeoPoint",
      "description": "Representation of a GeoPoint"
    },
    "GiveXCardBalanceWsDTO": {
      "type": "object",
      "properties": {
        "balance": {
          "$ref": "#/definitions/GiveXCardValueWsDTO",
          "originalRef": "GiveXCardValueWsDTO"
        },
        "expiration": {
          "type": "string"
        }
      },
      "title": "GiveXCardBalanceWsDTO"
    },
    "GiveXCardValueWsDTO": {
      "type": "object",
      "properties": {
        "currencyIso": {
          "type": "string"
        },
        "formattedValue": {
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      },
      "title": "GiveXCardValueWsDTO"
    },
    "GiveXGiftCardPaymentWsDTO": {
      "type": "object",
      "properties": {
        "cart": {
          "$ref": "#/definitions/Cart",
          "originalRef": "Cart"
        },
        "giftCardBalance": {
          "$ref": "#/definitions/GiveXCardBalanceWsDTO",
          "originalRef": "GiveXCardBalanceWsDTO"
        }
      },
      "title": "GiveXGiftCardPaymentWsDTO"
    },
    "IconOptionListWsDTO": {
      "type": "object",
      "properties": {
        "iconOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IconOptionWsDto",
            "originalRef": "IconOptionWsDto"
          }
        }
      },
      "title": "IconOptionListWsDTO"
    },
    "IconOptionWsDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "IconOptionWsDto"
    },
    "Image": {
      "type": "object",
      "properties": {
        "altText": {
          "type": "string",
          "description": "Tooltip content which is visible while image mouse hovering"
        },
        "format": {
          "type": "string",
          "description": "Format of the image, can be zoom, product, thumbnail, store, cartIcon, etc."
        },
        "galleryIndex": {
          "type": "integer",
          "format": "int32",
          "description": "Index of the image while displayed in gallery"
        },
        "imageType": {
          "type": "string",
          "description": "Type of the image, can be PRIMARY or GALLERY",
          "enum": [
            "PRIMARY",
            "GALLERY"
          ]
        },
        "mimeType": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "description": "URL address of the image"
        }
      },
      "title": "Image",
      "description": "Representation of an Image"
    },
    "Language": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "true/false indicator when the language is active"
        },
        "isocode": {
          "type": "string",
          "description": "iso code of the language"
        },
        "name": {
          "type": "string",
          "description": "name of the language"
        },
        "nativeName": {
          "type": "string",
          "description": "name the language in native form"
        }
      },
      "title": "Language",
      "description": "Representation of a Language"
    },
    "LanguageList": {
      "type": "object",
      "properties": {
        "languages": {
          "type": "array",
          "description": "This is the list of Language fields that should be returned in the response body",
          "items": {
            "$ref": "#/definitions/Language",
            "originalRef": "Language"
          }
        }
      },
      "title": "LanguageList",
      "description": "Lists all available languages (all languages used for a particular store). If the list of languages for a base store is empty, a list of all languages available in the system will be returned"
    },
    "LegalEntityDetailsWsDTO": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        },
        "code": {
          "type": "string"
        },
        "registeredCompanyNumber": {
          "type": "string"
        },
        "vatNumber": {
          "type": "string"
        }
      },
      "title": "LegalEntityDetailsWsDTO"
    },
    "LegalEntityDto": {
      "type": "object",
      "properties": {
        "address": {
          "xml": {
            "name": "address",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/AddressDto",
          "originalRef": "AddressDto"
        },
        "registeredCompanyNumber": {
          "type": "string",
          "xml": {
            "name": "registeredCompanyNumber",
            "attribute": false,
            "wrapped": false
          }
        },
        "vatNumber": {
          "type": "string",
          "xml": {
            "name": "vatNumber",
            "attribute": false,
            "wrapped": false
          }
        }
      },
      "title": "LegalEntityDto"
    },
    "MaterialListWsDTO": {
      "type": "object",
      "properties": {
        "materials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MaterialWsDto",
            "originalRef": "MaterialWsDto"
          }
        }
      },
      "title": "MaterialListWsDTO"
    },
    "MaterialWsDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "MaterialWsDto"
    },
    "MemberList": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "description": "List of member",
          "items": {
            "$ref": "#/definitions/Principal",
            "originalRef": "Principal"
          }
        }
      },
      "title": "MemberList",
      "description": "Representation of a Member List"
    },
    "ModificationResult": {
      "type": "object",
      "properties": {
        "additionalData": {
          "type": "string"
        },
        "pspReference": {
          "type": "string"
        },
        "response": {
          "type": "string",
          "enum": [
            "[capture-received]",
            "[cancel-received]",
            "[refund-received]",
            "[cancelOrRefund-received]"
          ]
        }
      },
      "title": "ModificationResult"
    },
    "MultibuyDto": {
      "type": "object",
      "properties": {
        "appliedToQuantity": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "appliedToQuantity",
            "attribute": false,
            "wrapped": false
          }
        },
        "finalPrice": {
          "xml": {
            "name": "finalPrice",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "sumOfBasePrices": {
          "xml": {
            "name": "sumOfBasePrices",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalDiscounts": {
          "xml": {
            "name": "totalDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "unitDiscounts": {
          "xml": {
            "name": "unitDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        }
      },
      "title": "MultibuyDto"
    },
    "MultibuyWsDTO": {
      "type": "object",
      "properties": {
        "appliedToQuantity": {
          "type": "integer",
          "format": "int32"
        },
        "finalPrice": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "sumOfBasePrices": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        }
      },
      "title": "MultibuyWsDTO"
    },
    "OpeningSchedule": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Code of the opening schedule"
        },
        "name": {
          "type": "string",
          "description": "Name of the opening schedule"
        },
        "specialDayOpeningList": {
          "type": "array",
          "description": "List of special opening days",
          "items": {
            "$ref": "#/definitions/SpecialOpeningDay",
            "originalRef": "SpecialOpeningDay"
          }
        },
        "weekDayOpeningList": {
          "type": "array",
          "description": "List of weekday opening days",
          "items": {
            "$ref": "#/definitions/WeekdayOpeningDay",
            "originalRef": "WeekdayOpeningDay"
          }
        }
      },
      "title": "OpeningSchedule",
      "description": "Representation of an Opening schedule"
    },
    "Order": {
      "type": "object",
      "properties": {
        "appliedCrmVoucherValue": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "appliedGiftCardValue": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "appliedOrderPromotions": {
          "type": "array",
          "description": "List of applied order promotions",
          "items": {
            "$ref": "#/definitions/PromotionResult",
            "originalRef": "PromotionResult"
          }
        },
        "appliedProductPromotions": {
          "type": "array",
          "description": "List of applied product promotions",
          "items": {
            "$ref": "#/definitions/PromotionResult",
            "originalRef": "PromotionResult"
          }
        },
        "appliedVouchers": {
          "type": "array",
          "description": "List of applied vouchers",
          "items": {
            "$ref": "#/definitions/Voucher",
            "originalRef": "Voucher"
          }
        },
        "calculated": {
          "type": "boolean",
          "description": "Flag showing if order is calculated"
        },
        "cancellable": {
          "type": "boolean",
          "example": true,
          "description": "Boolean flag showing if order is cancellable"
        },
        "cartIncludesDigitalProduct": {
          "type": "boolean"
        },
        "cartIncludesNonDigitalProduct": {
          "type": "boolean"
        },
        "code": {
          "type": "string",
          "description": "Code number of order"
        },
        "consignments": {
          "type": "array",
          "description": "List of consignment",
          "items": {
            "$ref": "#/definitions/Consignment",
            "originalRef": "Consignment"
          }
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Date of order creation"
        },
        "crmVoucherUsed": {
          "type": "boolean"
        },
        "customerCrmVoucherBalance": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "customerDetails": {
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        },
        "deliveryAddress": {
          "description": "Delivery address",
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        },
        "deliveryCost": {
          "description": "Delivery cost",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "deliveryCostWithTax": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "deliveryItemsQuantity": {
          "type": "integer",
          "format": "int64",
          "description": "Quantity of delivery items"
        },
        "deliveryMode": {
          "description": "Delivery mode information",
          "$ref": "#/definitions/DeliveryMode",
          "originalRef": "DeliveryMode"
        },
        "deliveryModeType": {
          "type": "string"
        },
        "deliveryOrderGroups": {
          "type": "array",
          "description": "List of delivery order entries group",
          "items": {
            "$ref": "#/definitions/DeliveryOrderEntryGroup",
            "originalRef": "DeliveryOrderEntryGroup"
          }
        },
        "deliveryStatus": {
          "type": "string",
          "description": "Order delivery status"
        },
        "deliveryStatusDisplay": {
          "type": "string",
          "description": "Order delivery status display"
        },
        "entries": {
          "type": "array",
          "description": "List of order entries",
          "items": {
            "$ref": "#/definitions/OrderEntry",
            "originalRef": "OrderEntry"
          }
        },
        "entryGroups": {
          "type": "array",
          "description": "List of entry groups",
          "items": {
          }
        },
        "giftMessage": {
          "$ref": "#/definitions/ServiceProductOrderEntryWsDTO",
          "originalRef": "ServiceProductOrderEntryWsDTO"
        },
        "grandTotalExclTax": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "guestCustomer": {
          "type": "boolean",
          "description": "Flag showing if customer is Guest customer"
        },
        "guid": {
          "type": "string",
          "description": "Guest user id identifier"
        },
        "loyaltyPoints": {
          "type": "number",
          "format": "double"
        },
        "net": {
          "type": "boolean",
          "description": "Flag stating iv value is net-value"
        },
        "orderDiscounts": {
          "description": "Order discounts",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "orderNote": {
          "type": "string"
        },
        "paymentAddress": {
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        },
        "paymentInfo": {
          "description": "Payment information",
          "$ref": "#/definitions/PaymentDetails",
          "originalRef": "PaymentDetails"
        },
        "pickupItemsQuantity": {
          "type": "integer",
          "format": "int64",
          "description": "Quantity of pickup items"
        },
        "pickupOrderGroups": {
          "type": "array",
          "description": "List of pickup order entry group",
          "items": {
            "$ref": "#/definitions/PickupOrderEntryGroup",
            "originalRef": "PickupOrderEntryGroup"
          }
        },
        "productDiscounts": {
          "description": "Product discounts",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "receiptNumber": {
          "type": "string"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date-time"
        },
        "returnable": {
          "type": "boolean",
          "example": true,
          "description": "Boolean flag showing if order is returnable"
        },
        "site": {
          "type": "string",
          "description": "Site"
        },
        "status": {
          "type": "string",
          "description": "Status of order"
        },
        "statusDisplay": {
          "type": "string",
          "description": "Status display"
        },
        "store": {
          "type": "string",
          "description": "Store"
        },
        "subTotal": {
          "description": "Subtotal price",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "subTotalWithoutDiscounts": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "subTotalWithoutTax": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "taxExempt": {
          "type": "boolean"
        },
        "taxExemptCertificateNumber": {
          "type": "string"
        },
        "totalDiscounts": {
          "description": "Total discounts",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalDiscountsWithoutPromoCode": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalDiscountsWithoutPromoCodeAndVoucher": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalDiscountsWithoutVoucher": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalItems": {
          "type": "integer",
          "format": "int32"
        },
        "totalPrice": {
          "description": "Total price value",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalPriceWithTax": {
          "description": "Total price with tax",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalPriceWithoutAppliedGiftCardValue": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalTax": {
          "description": "Total tax price",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalTaxWithoutDeliveryCostTax": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "unconsignedEntries": {
          "type": "array",
          "description": "List of unconsigned order entries",
          "items": {
            "$ref": "#/definitions/OrderEntry",
            "originalRef": "OrderEntry"
          }
        },
        "urlPrefix": {
          "type": "string"
        },
        "useInternalTaxCalculationFallback": {
          "type": "boolean"
        },
        "user": {
          "description": "User information",
          "$ref": "#/definitions/Principal",
          "originalRef": "Principal"
        }
      },
      "title": "Order",
      "description": "Representation of an Order"
    },
    "OrderAuthorizationWsDTO": {
      "type": "object",
      "properties": {
        "authorized": {
          "type": "boolean"
        }
      },
      "title": "OrderAuthorizationWsDTO"
    },
    "OrderDto": {
      "type": "object",
      "properties": {
        "cancelledEntriesData": {
          "xml": {
            "name": "cancelledEntriesData",
            "attribute": false,
            "wrapped": false
          }
        },
        "code": {
          "type": "string",
          "xml": {
            "name": "code",
            "attribute": false,
            "wrapped": false
          }
        },
        "concessionStoreRequest": {
          "type": "boolean"
        },
        "consignments": {
          "type": "array",
          "xml": {
            "name": "consignment",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/ConsignmentDto",
            "originalRef": "ConsignmentDto"
          }
        },
        "created": {
          "type": "string",
          "xml": {
            "name": "created",
            "attribute": false,
            "wrapped": false
          }
        },
        "currency": {
          "type": "string",
          "xml": {
            "name": "currency",
            "attribute": false,
            "wrapped": false
          }
        },
        "deliveryAddress": {
          "xml": {
            "name": "deliveryAddress",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/AddressDto",
          "originalRef": "AddressDto"
        },
        "deliveryCost": {
          "xml": {
            "name": "deliveryCost",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "deliveryCostWithoutTax": {
          "xml": {
            "name": "deliveryCostWithoutTax",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "deliveryMode": {
          "xml": {
            "name": "deliveryMode",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/DeliveryModeDto",
          "originalRef": "DeliveryModeDto"
        },
        "deliveryType": {
          "xml": {
            "name": "deliveryType",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/DeliveryTypeDto",
          "originalRef": "DeliveryTypeDto"
        },
        "entries": {
          "type": "array",
          "xml": {
            "name": "orderEntry",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/OrderEntryDto",
            "originalRef": "OrderEntryDto"
          }
        },
        "erpId": {
          "type": "string",
          "xml": {
            "name": "erpId",
            "attribute": false,
            "wrapped": false
          }
        },
        "fullGivexAmount": {
          "xml": {
            "name": "fullGivexAmount",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "giftCardSerialNumber": {
          "type": "string",
          "xml": {
            "name": "giftCardSerialNumber",
            "attribute": false,
            "wrapped": false
          }
        },
        "hasDigitalProduct": {
          "type": "boolean",
          "xml": {
            "name": "hasDigitalProduct",
            "attribute": false,
            "wrapped": false
          }
        },
        "hasPhysicalProduct": {
          "type": "boolean",
          "xml": {
            "name": "hasPhysicalProduct",
            "attribute": false,
            "wrapped": false
          }
        },
        "language": {
          "type": "string",
          "xml": {
            "name": "language",
            "attribute": false,
            "wrapped": false
          }
        },
        "legalEntity": {
          "xml": {
            "name": "legalEntity",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/LegalEntityDto",
          "originalRef": "LegalEntityDto"
        },
        "orderDiscounts": {
          "xml": {
            "name": "orderDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "orderNote": {
          "type": "string",
          "xml": {
            "name": "orderNote",
            "attribute": false,
            "wrapped": false
          }
        },
        "orderType": {
          "type": "string",
          "xml": {
            "name": "orderType",
            "attribute": false,
            "wrapped": false
          },
          "enum": [
            "ZWOR",
            "ZSD",
            "ZWRE",
            "ZWCR"
          ]
        },
        "originalOrderCode": {
          "type": "string",
          "xml": {
            "name": "originalOrderCode",
            "attribute": false,
            "wrapped": false
          }
        },
        "payerId": {
          "type": "string",
          "xml": {
            "name": "payerId",
            "attribute": false,
            "wrapped": false
          }
        },
        "paymentAddress": {
          "xml": {
            "name": "paymentAddress",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/AddressDto",
          "originalRef": "AddressDto"
        },
        "paymentMethod": {
          "type": "string",
          "xml": {
            "name": "paymentMethod",
            "attribute": false,
            "wrapped": false
          }
        },
        "paymentStatus": {
          "type": "string",
          "xml": {
            "name": "paymentStatus",
            "attribute": false,
            "wrapped": false
          }
        },
        "pricing": {
          "type": "string",
          "xml": {
            "name": "pricing",
            "attribute": false,
            "wrapped": false
          }
        },
        "productDiscounts": {
          "xml": {
            "name": "productDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "promotionGroups": {
          "type": "array",
          "xml": {
            "name": "promotionGroup",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "type": "string"
          }
        },
        "receiptNumber": {
          "type": "string",
          "xml": {
            "name": "receiptNumber",
            "attribute": false,
            "wrapped": false
          }
        },
        "refundedCrmVoucherValue": {
          "xml": {
            "name": "refundedCrmVoucherValue",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "xml": {
            "name": "requestedDeliveryDate",
            "attribute": false,
            "wrapped": false
          }
        },
        "returnRequestCompletionDate": {
          "type": "string",
          "xml": {
            "name": "returnRequestCompletionDate",
            "attribute": false,
            "wrapped": false
          }
        },
        "returnRequestNumber": {
          "type": "string",
          "xml": {
            "name": "returnRequestNumber",
            "attribute": false,
            "wrapped": false
          }
        },
        "returnRequestType": {
          "type": "string",
          "xml": {
            "name": "returnRequestType",
            "attribute": false,
            "wrapped": false
          }
        },
        "sendReturnRegistrationEmail": {
          "type": "boolean",
          "xml": {
            "name": "sendReturnRegistrationEmail",
            "attribute": false,
            "wrapped": false
          }
        },
        "shipToPartyCode": {
          "type": "string",
          "xml": {
            "name": "shipToPartyCode",
            "attribute": false,
            "wrapped": false
          }
        },
        "shippedEntriesData": {
          "xml": {
            "name": "shippedEntriesData",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/ShippedEntriesDto",
          "originalRef": "ShippedEntriesDto"
        },
        "shippingTaxes": {
          "type": "array",
          "xml": {
            "name": "tax",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/TaxDto",
            "originalRef": "TaxDto"
          }
        },
        "site": {
          "type": "string",
          "xml": {
            "name": "site",
            "attribute": false,
            "wrapped": false
          }
        },
        "soldToCountryCode": {
          "type": "string",
          "xml": {
            "name": "soldToCountryCode",
            "attribute": false,
            "wrapped": false
          }
        },
        "soldToPartyCode": {
          "type": "string",
          "xml": {
            "name": "soldToPartyCode",
            "attribute": false,
            "wrapped": false
          }
        },
        "status": {
          "type": "string",
          "xml": {
            "name": "status",
            "attribute": false,
            "wrapped": false
          }
        },
        "subTotal": {
          "xml": {
            "name": "subTotal",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "subTotalWithoutOrderDiscounts": {
          "xml": {
            "name": "subTotalWithoutOrderDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "subTotalWithoutTotalDiscounts": {
          "xml": {
            "name": "subTotalWithoutTotalDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "taxExempt": {
          "type": "boolean",
          "xml": {
            "name": "taxExempt",
            "attribute": false,
            "wrapped": false
          }
        },
        "taxExemptCertificateNumber": {
          "type": "string",
          "xml": {
            "name": "taxExemptCertificateNumber",
            "attribute": false,
            "wrapped": false
          }
        },
        "totalDiscounts": {
          "xml": {
            "name": "totalDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalPrice": {
          "xml": {
            "name": "totalPrice",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalPriceWithTax": {
          "xml": {
            "name": "totalPriceWithTax",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalPriceWithTaxWithAppliedGiftCardValue": {
          "xml": {
            "name": "totalPriceWithTaxWithAppliedGiftCardValue",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalShippingTax": {
          "xml": {
            "name": "totalShippingTax",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalShippingTaxPercentage": {
          "type": "number",
          "format": "double",
          "xml": {
            "name": "totalShippingTaxPercentage",
            "attribute": false,
            "wrapped": false
          }
        },
        "totalTax": {
          "xml": {
            "name": "totalTax",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalTaxPercentage": {
          "type": "number",
          "format": "double",
          "xml": {
            "name": "totalTaxPercentage",
            "attribute": false,
            "wrapped": false
          }
        },
        "totalTaxes": {
          "type": "array",
          "xml": {
            "name": "tax",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/TaxDto",
            "originalRef": "TaxDto"
          }
        },
        "update": {
          "type": "boolean",
          "xml": {
            "name": "update",
            "attribute": false,
            "wrapped": false
          }
        },
        "urlPrefix": {
          "type": "string",
          "xml": {
            "name": "urlPrefix",
            "attribute": false,
            "wrapped": false
          }
        },
        "useInternalTaxCalculationFallback": {
          "type": "boolean",
          "xml": {
            "name": "useInternalTaxCalculationFallback",
            "attribute": false,
            "wrapped": false
          }
        },
        "usedGivexAmount": {
          "xml": {
            "name": "usedGivexAmount",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "user": {
          "xml": {
            "name": "user",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/UserDto",
          "originalRef": "UserDto"
        },
        "voucherDiscount": {
          "xml": {
            "name": "voucherDiscount",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        }
      },
      "title": "OrderDto"
    },
    "OrderEntry": {
      "type": "object",
      "properties": {
        "adjustedBasePrice": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "amountExcludingTax": {
          "type": "number",
          "format": "double"
        },
        "amountIncludingTax": {
          "type": "number",
          "format": "double"
        },
        "basePrice": {
          "description": "Base price of order entry item",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "cancellableQuantity": {
          "type": "integer",
          "format": "int64",
          "example": 5,
          "description": "Quantity number of cancellable items in order entry"
        },
        "cancelledItemsPrice": {
          "description": "Total price of cancelled items which belong to the order entry item",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "configurationInfos": {
          "type": "array",
          "description": "Configuration info of order entry",
          "items": {
            "$ref": "#/definitions/ConfigurationInfo",
            "originalRef": "ConfigurationInfo"
          }
        },
        "customizationCost": {
          "type": "number",
          "format": "double"
        },
        "customizedProductImageUrl": {
          "type": "string"
        },
        "deliveryMode": {
          "description": "Delivery mode",
          "$ref": "#/definitions/DeliveryMode",
          "originalRef": "DeliveryMode"
        },
        "deliveryPointOfService": {
          "description": "Point of service associated with order entry",
          "$ref": "#/definitions/PointOfService",
          "originalRef": "PointOfService"
        },
        "entryNumber": {
          "type": "integer",
          "format": "int32",
          "description": "Entry number of the order entry"
        },
        "giveAway": {
          "type": "boolean"
        },
        "multibuy": {
          "$ref": "#/definitions/MultibuyWsDTO",
          "originalRef": "MultibuyWsDTO"
        },
        "originalProduct": {
        },
        "product": {
          "description": "Product details of order entry"
        },
        "productConfiguration": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int64",
          "description": "Quantity number of items in order entry"
        },
        "recipeId": {
          "type": "string"
        },
        "returnableQuantity": {
          "type": "integer",
          "format": "int64",
          "example": 5,
          "description": "Quantity number of returnable items in order entry"
        },
        "returnedItemsPrice": {
          "description": "Total price of returned items which belong to the order entry item",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "serviceProducts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceProductOrderEntryWsDTO",
            "originalRef": "ServiceProductOrderEntryWsDTO"
          }
        },
        "statusSummaryList": {
          "type": "array",
          "description": "List of aggregated status information per entry, relevant if the entry is configurable and its configuration contains one or many issues in different severities. Note that configurators typically raise such issues only in case the parent document is changeable. In this case the issues (depending on their severity) need to be fixed before a checkout can be done. This means this segment can be present for a cart entry, for order entries it will always be empty",
          "items": {
            "$ref": "#/definitions/StatusSummary",
            "originalRef": "StatusSummary"
          }
        },
        "taxAmount": {
          "type": "number",
          "format": "double"
        },
        "taxPercentage": {
          "type": "number",
          "format": "double"
        },
        "totalPrice": {
          "description": "Total price of order entry item",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalPriceWithoutDiscount": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "updateable": {
          "type": "boolean",
          "description": "Flag defining if order entry item is updateable"
        },
        "vasType": {
          "type": "string"
        }
      },
      "title": "OrderEntry",
      "description": "Representation of an Order entry"
    },
    "OrderEntryDto": {
      "type": "object",
      "properties": {
        "combinedOrderEntryTax": {
          "xml": {
            "name": "combinedOrderEntryTax",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "customized": {
          "type": "boolean",
          "xml": {
            "name": "customized",
            "attribute": false,
            "wrapped": false
          }
        },
        "deliveryDate": {
          "type": "string",
          "xml": {
            "name": "deliveryDate",
            "attribute": false,
            "wrapped": false
          }
        },
        "detailFrom": {
          "type": "string",
          "xml": {
            "name": "detailFrom",
            "attribute": false,
            "wrapped": false
          }
        },
        "detailTo": {
          "type": "string",
          "xml": {
            "name": "detailTo",
            "attribute": false,
            "wrapped": false
          }
        },
        "detailedDescription": {
          "type": "string",
          "xml": {
            "name": "detailedDescription",
            "attribute": false,
            "wrapped": false
          }
        },
        "discounts": {
          "type": "array",
          "xml": {
            "name": "discount",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/DiscountDto",
            "originalRef": "DiscountDto"
          }
        },
        "entryNumber": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "entryNumber",
            "attribute": false,
            "wrapped": false
          }
        },
        "entryTaxes": {
          "type": "array",
          "xml": {
            "name": "tax",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/TaxDto",
            "originalRef": "TaxDto"
          }
        },
        "giftCardSerialNumbers": {
          "type": "array",
          "xml": {
            "name": "giftCardSerialNumber",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "type": "string"
          }
        },
        "giveAway": {
          "type": "boolean",
          "xml": {
            "name": "giveAway",
            "attribute": false,
            "wrapped": false
          }
        },
        "message": {
          "type": "string",
          "xml": {
            "name": "message",
            "attribute": false,
            "wrapped": false
          }
        },
        "multibuy": {
          "xml": {
            "name": "multibuy",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/MultibuyDto",
          "originalRef": "MultibuyDto"
        },
        "netOrderEntryPriceCombined": {
          "xml": {
            "name": "netOrderEntryPriceCombined",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "netOrderEntryPriceIncludingDiscounts": {
          "xml": {
            "name": "netOrderEntryPriceIncludingDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "netUnitBasePriceIncludingDiscounts": {
          "xml": {
            "name": "netUnitBasePriceIncludingDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "orderLinePercentageDiscount": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "orderLinePercentageDiscount",
            "attribute": false,
            "wrapped": false
          }
        },
        "product": {
          "xml": {
            "name": "product",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/ProductDto",
          "originalRef": "ProductDto"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "quantity",
            "attribute": false,
            "wrapped": false
          }
        },
        "reason": {
          "type": "string",
          "xml": {
            "name": "reason",
            "attribute": false,
            "wrapped": false
          }
        },
        "recipeId": {
          "type": "string",
          "xml": {
            "name": "recipeId",
            "attribute": false,
            "wrapped": false
          }
        },
        "recipientEmail": {
          "type": "string",
          "xml": {
            "name": "recipientEmail",
            "attribute": false,
            "wrapped": false
          }
        },
        "returnRequestReason": {
          "xml": {
            "name": "returnRequestReason",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/ReturnRequestReasonDto",
          "originalRef": "ReturnRequestReasonDto"
        },
        "sapItemCategory": {
          "type": "string",
          "xml": {
            "name": "sapItemCategory",
            "attribute": false,
            "wrapped": false
          }
        },
        "serviceProductEntries": {
          "type": "array",
          "xml": {
            "name": "serviceProduct",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/ServiceProductOrderEntryDto",
            "originalRef": "ServiceProductOrderEntryDto"
          }
        },
        "shortDescription": {
          "type": "string",
          "xml": {
            "name": "shortDescription",
            "attribute": false,
            "wrapped": false
          }
        },
        "totalEntryTax": {
          "xml": {
            "name": "totalEntryTax",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalEntryTaxPercentage": {
          "type": "number",
          "format": "double",
          "xml": {
            "name": "totalEntryTaxPercentage",
            "attribute": false,
            "wrapped": false
          }
        },
        "totalPrice": {
          "xml": {
            "name": "totalPrice",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "unitBasePrice": {
          "xml": {
            "name": "unitBasePrice",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "unitDiscountPrice": {
          "xml": {
            "name": "unitDiscountPrice",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "unitDiscounts": {
          "xml": {
            "name": "unitDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "vasMethodId": {
          "type": "string",
          "xml": {
            "name": "vasMethodId",
            "attribute": false,
            "wrapped": false
          }
        },
        "vasType": {
          "type": "string",
          "xml": {
            "name": "vasType",
            "attribute": false,
            "wrapped": false
          }
        }
      },
      "title": "OrderEntryDto"
    },
    "OrderEntryList": {
      "type": "object",
      "properties": {
        "orderEntries": {
          "type": "array",
          "description": "List of order entries",
          "items": {
            "$ref": "#/definitions/OrderEntry",
            "originalRef": "OrderEntry"
          }
        }
      },
      "title": "OrderEntryList",
      "description": "Representation of an Order entry list consumed"
    },
    "OrderHistory": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Code of Order History"
        },
        "guid": {
          "type": "string",
          "description": "Guest user identifier"
        },
        "placed": {
          "type": "string",
          "format": "date-time",
          "description": "Date of placing order"
        },
        "status": {
          "type": "string",
          "description": "Status of Order History"
        },
        "statusDisplay": {
          "type": "string",
          "description": "Status display"
        },
        "total": {
          "description": "Total price",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        }
      },
      "title": "OrderHistory",
      "description": "Representation of an Order History"
    },
    "OrderHistoryList": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "description": "List of order history items",
          "items": {
            "$ref": "#/definitions/OrderHistory",
            "originalRef": "OrderHistory"
          }
        },
        "pagination": {
          "description": "Pagination items",
          "$ref": "#/definitions/deprecatedPagination",
          "originalRef": "deprecatedPagination"
        },
        "sorts": {
          "type": "array",
          "description": "List of sorts",
          "items": {
            "$ref": "#/definitions/Sort",
            "originalRef": "Sort"
          }
        }
      },
      "title": "OrderHistoryList",
      "description": "Representation of an Order History List"
    },
    "OrderHistoryListWsDTO": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderHistoryWsDTO",
            "originalRef": "OrderHistoryWsDTO"
          }
        },
        "pagination": {
          "$ref": "#/definitions/pagination",
          "originalRef": "pagination"
        },
        "sorts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sort",
            "originalRef": "sort"
          }
        }
      },
      "title": "OrderHistoryListWsDTO"
    },
    "OrderHistoryWsDTO": {
      "type": "object",
      "properties": {
        "appliedOrderPromotions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PromotionResult",
            "originalRef": "PromotionResult"
          }
        },
        "appliedProductPromotions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PromotionResult",
            "originalRef": "PromotionResult"
          }
        },
        "appliedVouchers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Voucher",
            "originalRef": "Voucher"
          }
        },
        "code": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "customerDetails": {
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        },
        "deliveryCost": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "deliveryMode": {
          "$ref": "#/definitions/DeliveryMode",
          "originalRef": "DeliveryMode"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderEntry",
            "originalRef": "OrderEntry"
          }
        },
        "grandTotalExclTax": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "guid": {
          "type": "string"
        },
        "includedDiscounts": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "loyaltyPoints": {
          "type": "number",
          "format": "double"
        },
        "orderCreator": {
          "type": "string"
        },
        "orderDiscounts": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "orderNote": {
          "type": "string"
        },
        "paymentAddress": {
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        },
        "productDiscounts": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "receiptNumber": {
          "type": "string"
        },
        "requestedDeliveryDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string"
        },
        "statusDisplay": {
          "type": "string"
        },
        "subTotal": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "taxExempt": {
          "type": "boolean"
        },
        "taxExemptCertificateNumber": {
          "type": "string"
        },
        "totalDiscounts": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalPrice": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalPriceWithTax": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "totalTax": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        }
      },
      "title": "OrderHistoryWsDTO"
    },
    "OrderStatusUpdateElement": {
      "type": "object",
      "properties": {
        "baseSiteId": {
          "type": "string",
          "description": "BaseSite identifier"
        },
        "code": {
          "type": "string",
          "description": "Code of update element of order status"
        },
        "status": {
          "type": "string",
          "description": "Status of update element"
        }
      },
      "title": "OrderStatusUpdateElement",
      "description": "Representation of an Order Status Update Element"
    },
    "OrderStatusUpdateElementList": {
      "type": "object",
      "properties": {
        "orderStatusUpdateElements": {
          "type": "array",
          "description": "List of order status update elements",
          "items": {
            "$ref": "#/definitions/OrderStatusUpdateElement",
            "originalRef": "OrderStatusUpdateElement"
          }
        }
      },
      "title": "OrderStatusUpdateElementList",
      "description": "Representation of an Order Status Update Element List"
    },
    "PaymentDetails": {
      "type": "object",
      "properties": {
        "accountHolderName": {
          "type": "string",
          "description": "Name of account holder"
        },
        "billingAddress": {
          "description": "Address details to be considered as billing address",
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        },
        "cardNumber": {
          "type": "string",
          "description": "Payment card number"
        },
        "cardType": {
          "description": "Type of payment card",
          "$ref": "#/definitions/CardType",
          "originalRef": "CardType"
        },
        "defaultPayment": {
          "type": "boolean",
          "description": "Flag to mark if payment the default one"
        },
        "expiryMonth": {
          "type": "string",
          "description": "Month of expiration of payment"
        },
        "expiryYear": {
          "type": "string",
          "description": "Year of expiration of payment"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of payment detail"
        },
        "issueNumber": {
          "type": "string",
          "description": "Issue number"
        },
        "saved": {
          "type": "boolean",
          "description": "Flag to mark if payment is saved one"
        },
        "startMonth": {
          "type": "string",
          "description": "Start month from which payment is valid"
        },
        "startYear": {
          "type": "string",
          "description": "Start year from which payment is valid"
        },
        "subscriptionId": {
          "type": "string",
          "description": "Identifier of subscription"
        }
      },
      "title": "PaymentDetails",
      "description": "Representation of a Payment Details"
    },
    "PaymentDetailsList": {
      "type": "object",
      "properties": {
        "payments": {
          "type": "array",
          "description": "List of payment details",
          "items": {
            "$ref": "#/definitions/PaymentDetails",
            "originalRef": "PaymentDetails"
          }
        }
      },
      "title": "PaymentDetailsList",
      "description": "Representation of a Payment details list"
    },
    "PaymentResult": {
      "type": "object",
      "properties": {
        "3DAuthenticated": {
          "type": "boolean"
        },
        "3DOffered": {
          "type": "boolean"
        },
        "additionalData": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "authCode": {
          "type": "string"
        },
        "authorised": {
          "type": "boolean"
        },
        "avsResult": {
          "type": "string"
        },
        "boletoBarCodeReference": {
          "type": "string"
        },
        "boletoData": {
          "type": "string"
        },
        "boletoDueDate": {
          "type": "string",
          "format": "date-time"
        },
        "boletoExpirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "boletoUrl": {
          "type": "string"
        },
        "cardBin": {
          "type": "string"
        },
        "cardHolderName": {
          "type": "string"
        },
        "cardSummary": {
          "type": "string"
        },
        "dccAmount": {
          "$ref": "#/definitions/Amount",
          "originalRef": "Amount"
        },
        "dccSignature": {
          "type": "string"
        },
        "expiryDate": {
          "type": "string",
          "format": "date-time"
        },
        "fraudResult": {
          "$ref": "#/definitions/FraudResult",
          "originalRef": "FraudResult"
        },
        "issuerUrl": {
          "type": "string"
        },
        "md": {
          "type": "string"
        },
        "paRequest": {
          "type": "string"
        },
        "paymentMethod": {
          "type": "string"
        },
        "pspReference": {
          "type": "string"
        },
        "received": {
          "type": "boolean"
        },
        "redirectShopper": {
          "type": "boolean"
        },
        "refusalReason": {
          "type": "string"
        },
        "refused": {
          "type": "boolean"
        },
        "resultCode": {
          "type": "string",
          "enum": [
            "Authorised",
            "PartiallyAuthorised",
            "Refused",
            "Error",
            "Cancelled",
            "Received",
            "RedirectShopper"
          ]
        }
      },
      "title": "PaymentResult"
    },
    "PickupOrderEntryGroup": {
      "type": "object",
      "properties": {
        "deliveryPointOfService": {
          "description": "Delivery point of service",
          "$ref": "#/definitions/PointOfService",
          "originalRef": "PointOfService"
        },
        "distance": {
          "type": "number",
          "format": "double",
          "description": "Distance calculated to pickup place"
        },
        "entries": {
          "type": "array",
          "description": "List of order entries",
          "items": {
            "$ref": "#/definitions/OrderEntry",
            "originalRef": "OrderEntry"
          }
        },
        "quantity": {
          "type": "integer",
          "format": "int64",
          "description": "Quantity of order entries in a group"
        },
        "totalPriceWithTax": {
          "description": "Total price with tax",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        }
      },
      "title": "PickupOrderEntryGroup",
      "description": "Representation of a Pickup Order Entry Group"
    },
    "PointOfService": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Address information of point of service",
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        },
        "description": {
          "type": "string",
          "description": "Description of the point of service"
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the point of service"
        },
        "distanceKm": {
          "type": "number",
          "format": "double",
          "description": "Distance to the point of service as number value"
        },
        "features": {
          "type": "object",
          "description": "List of features for a given point of service",
          "additionalProperties": {
            "type": "string"
          }
        },
        "formattedDistance": {
          "type": "string",
          "description": "Distance to the point of service as text value"
        },
        "geoPoint": {
          "description": "Geopoint localization info about point of service",
          "$ref": "#/definitions/GeoPoint",
          "originalRef": "GeoPoint"
        },
        "mapIcon": {
          "description": "Image associated with the point of service",
          "$ref": "#/definitions/Image",
          "originalRef": "Image"
        },
        "name": {
          "type": "string",
          "description": "Name of the point of service"
        },
        "openingHours": {
          "description": "Opening hours of point of service",
          "$ref": "#/definitions/OpeningSchedule",
          "originalRef": "OpeningSchedule"
        },
        "storeContent": {
          "type": "string",
          "description": "Store content of given point of service"
        },
        "storeImages": {
          "type": "array",
          "description": "Collection of images associated with a point of service",
          "items": {
            "$ref": "#/definitions/Image",
            "originalRef": "Image"
          }
        },
        "url": {
          "type": "string",
          "description": "Url address of the point of service"
        }
      },
      "title": "PointOfService",
      "description": "Representation of a Point of service"
    },
    "PointOfServiceList": {
      "type": "object",
      "properties": {
        "pointOfServices": {
          "type": "array",
          "description": "List of points of service",
          "items": {
            "$ref": "#/definitions/PointOfService",
            "originalRef": "PointOfService"
          }
        },
        "pointsOfServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PointOfService",
            "originalRef": "PointOfService"
          }
        }
      },
      "title": "PointOfServiceList",
      "description": "Representation of a Point of Service List"
    },
    "PointOfServiceStock": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Address information of point of service",
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        },
        "description": {
          "type": "string",
          "description": "Description of the point of service"
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the point of service"
        },
        "distanceKm": {
          "type": "number",
          "format": "double",
          "description": "Distance to the point of service as number value"
        },
        "features": {
          "type": "object",
          "description": "List of features for a given point of service",
          "additionalProperties": {
            "type": "string"
          }
        },
        "formattedDistance": {
          "type": "string",
          "description": "Distance to the point of service as text value"
        },
        "geoPoint": {
          "description": "Geopoint localization info about point of service",
          "$ref": "#/definitions/GeoPoint",
          "originalRef": "GeoPoint"
        },
        "mapIcon": {
          "description": "Image associated with the point of service",
          "$ref": "#/definitions/Image",
          "originalRef": "Image"
        },
        "name": {
          "type": "string",
          "description": "Name of the point of service"
        },
        "openingHours": {
          "description": "Opening hours of point of service",
          "$ref": "#/definitions/OpeningSchedule",
          "originalRef": "OpeningSchedule"
        },
        "stockInfo": {
          "description": "Stock information about point of service",
          "$ref": "#/definitions/Stock",
          "originalRef": "Stock"
        },
        "storeContent": {
          "type": "string",
          "description": "Store content of given point of service"
        },
        "storeImages": {
          "type": "array",
          "description": "Collection of images associated with a point of service",
          "items": {
            "$ref": "#/definitions/Image",
            "originalRef": "Image"
          }
        },
        "url": {
          "type": "string",
          "description": "Url address of the point of service"
        }
      },
      "title": "PointOfServiceStock",
      "description": "Representation of a Point Of Service Stock"
    },
    "Price": {
      "type": "object",
      "properties": {
        "currencyIso": {
          "type": "string",
          "description": "Currency iso format"
        },
        "exclusiveButVisible": {
          "type": "boolean"
        },
        "formattedValue": {
          "type": "string",
          "description": "Value of price formatted"
        },
        "maxQuantity": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum quantity of the price value"
        },
        "minQuantity": {
          "type": "integer",
          "format": "int64",
          "description": "Minimum quantity of the price value"
        },
        "priceType": {
          "type": "string",
          "description": "Type of the price",
          "enum": [
            "BUY",
            "FROM"
          ]
        },
        "promotionPrices": {
          "type": "array",
          "items": {
          }
        },
        "value": {
          "type": "number",
          "description": "Value of price in BigDecimal format"
        }
      },
      "title": "Price",
      "description": "Representation of a Price"
    },
    "PriceRange": {
      "type": "object",
      "properties": {
        "maxPrice": {
          "description": "Maximum value of the Price Range",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "minPrice": {
          "description": "Minium value of the Price Range",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        }
      },
      "title": "PriceRange",
      "description": "Representation of a Price Range"
    },
    "PriceValueWsDto": {
      "type": "object",
      "properties": {
        "crossOutPrice": {
          "type": "number",
          "format": "float"
        },
        "exclusiveButVisible": {
          "type": "boolean"
        },
        "formattedCrossOutPrice": {
          "type": "string"
        },
        "formattedPrice": {
          "type": "string"
        },
        "price": {
          "type": "number",
          "format": "float"
        },
        "promotionCode": {
          "type": "string"
        },
        "promotionPrices": {
          "type": "array",
          "items": {
          }
        },
        "type": {
          "type": "string"
        },
        "validityFrom": {
          "type": "string"
        },
        "validityTo": {
          "type": "string"
        }
      },
      "title": "PriceValueWsDto",
      "description": "The crossOutPrice is only set when available. For the Price Feed the type is used instead of the crossOutPrice."
    },
    "PriceWsDto": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string"
        },
        "identifier": {
          "type": "string",
          "description": "Identifier used to distinct between catalog and site specific prices. The identifier of a catalog price consists of <b>catalogId</b> and the price of a site specific price consists of <b>catalogId:siteId</b>."
        },
        "netGross": {
          "type": "string",
          "enum": [
            "NET",
            "GROSS"
          ]
        },
        "priceValues": {
          "type": "array",
          "items": {
          }
        },
        "userGroup": {
          "type": "string"
        }
      },
      "title": "PriceWsDto",
      "description": "The key of a price row consists of identifier, currency, userGroup, netGross. "
    },
    "Principal": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the user"
        },
        "uid": {
          "type": "string",
          "description": "Unique user identifier"
        }
      },
      "title": "Principal",
      "description": "Representation of a Principal webservice DTO used for defining User data types"
    },
    "ProductCareListWsDTO": {
      "type": "object",
      "properties": {
        "productCares": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductCareWsDto",
            "originalRef": "ProductCareWsDto"
          }
        }
      },
      "title": "ProductCareListWsDTO"
    },
    "ProductCareValueWsDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "boolean"
        }
      },
      "title": "ProductCareValueWsDto"
    },
    "ProductCareWsDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "ProductCareWsDto"
    },
    "ProductCodesWsDTO": {
      "type": "object",
      "properties": {
        "productCodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "ProductCodesWsDTO"
    },
    "ProductDocumentWsDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "documentType": {
          "type": "string"
        },
        "documentUrl": {
          "type": "string"
        }
      },
      "title": "ProductDocumentWsDto"
    },
    "ProductDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "xml": {
            "name": "code",
            "attribute": false,
            "wrapped": false
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "name": "name",
            "attribute": false,
            "wrapped": false
          }
        },
        "originalCustomizedProductCode": {
          "type": "string",
          "xml": {
            "name": "originalCustomizedProductCode",
            "attribute": false,
            "wrapped": false
          }
        },
        "productVariantName": {
          "type": "string",
          "xml": {
            "name": "productVariantName",
            "attribute": false,
            "wrapped": false
          }
        },
        "tags": {
          "type": "array",
          "xml": {
            "name": "tag",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/TagDto",
            "originalRef": "TagDto"
          }
        }
      },
      "title": "ProductDto"
    },
    "ProductExpressUpdateElement": {
      "type": "object",
      "properties": {
        "catalogId": {
          "type": "string",
          "description": "Catalog identifier"
        },
        "catalogVersion": {
          "type": "string",
          "description": "Catalog version"
        },
        "code": {
          "type": "string",
          "description": "Code of product express update element"
        }
      },
      "title": "ProductExpressUpdateElement",
      "description": "Representation of a Product Express Update Element"
    },
    "ProductExpressUpdateElementList": {
      "type": "object",
      "properties": {
        "productExpressUpdateElements": {
          "type": "array",
          "description": "List of product express update element",
          "items": {
            "$ref": "#/definitions/ProductExpressUpdateElement",
            "originalRef": "ProductExpressUpdateElement"
          }
        }
      },
      "title": "ProductExpressUpdateElementList",
      "description": "Representation of a Product Express Update Element List"
    },
    "ProductList": {
      "type": "object",
      "properties": {
        "catalog": {
          "type": "string",
          "description": "Catalog of product list"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32",
          "description": "Number of current page"
        },
        "products": {
          "type": "array",
          "description": "List of products",
          "items": {
          }
        },
        "totalPageCount": {
          "type": "integer",
          "format": "int32",
          "description": "Total page count"
        },
        "totalProductCount": {
          "type": "integer",
          "format": "int32",
          "description": "Total product count"
        },
        "version": {
          "type": "string",
          "description": "Version of product list"
        }
      },
      "title": "ProductList",
      "description": "Representation of a Product List"
    },
    "ProductPriceListWsDTO": {
      "type": "object",
      "properties": {
        "productPrices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductPriceWsDto",
            "originalRef": "ProductPriceWsDto"
          }
        }
      },
      "title": "ProductPriceListWsDTO"
    },
    "ProductPriceWsDto": {
      "type": "object",
      "properties": {
        "prices": {
          "type": "array",
          "description": "Prices per key (identifier, currency, userGroup, netGross) always",
          "items": {
            "$ref": "#/definitions/PriceWsDto",
            "originalRef": "PriceWsDto"
          }
        },
        "productId": {
          "type": "string"
        }
      },
      "title": "ProductPriceWsDto"
    },
    "ProductReference": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Reference description"
        },
        "preselected": {
          "type": "boolean",
          "description": "Flag stating if product reference is preselected"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "Reference quantity"
        },
        "referenceType": {
          "type": "string",
          "description": "Reference type"
        },
        "target": {
          "description": "Target product"
        }
      },
      "title": "ProductReference",
      "description": "Representation of a Product Reference"
    },
    "ProductReferenceList": {
      "type": "object",
      "properties": {
        "references": {
          "type": "array",
          "description": "List of product references",
          "items": {
          }
        }
      },
      "title": "ProductReferenceList",
      "description": "Representation of a Product Reference List"
    },
    "ProductSearchPage": {
      "type": "object",
      "properties": {
        "breadcrumbs": {
          "type": "array",
          "description": "List of breadcrumbs info",
          "items": {
            "$ref": "#/definitions/Breadcrumb",
            "originalRef": "Breadcrumb"
          }
        },
        "categoryCode": {
          "type": "string",
          "description": "Code of category"
        },
        "currentQuery": {
          "description": "Current query",
          "$ref": "#/definitions/SearchState",
          "originalRef": "SearchState"
        },
        "facets": {
          "type": "array",
          "description": "List of facets",
          "items": {
            "$ref": "#/definitions/Facet",
            "originalRef": "Facet"
          }
        },
        "freeTextSearch": {
          "type": "string",
          "description": "Free text search"
        },
        "keywordRedirectUrl": {
          "type": "string",
          "description": "Redirect url address keyword"
        },
        "pagination": {
          "description": "Pagination number",
          "$ref": "#/definitions/deprecatedPagination",
          "originalRef": "deprecatedPagination"
        },
        "products": {
          "type": "array",
          "description": "List of products",
          "items": {
          }
        },
        "sorts": {
          "type": "array",
          "description": "List of sorts",
          "items": {
            "$ref": "#/definitions/Sort",
            "originalRef": "Sort"
          }
        },
        "spellingSuggestion": {
          "description": "Spelling suggestion",
          "$ref": "#/definitions/SpellingSuggestion",
          "originalRef": "SpellingSuggestion"
        }
      },
      "title": "ProductSearchPage",
      "description": "Representation of a Product Search Page"
    },
    "ProductTagWsDTO": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "ProductTagWsDTO"
    },
    "ProductWsDTO": {
      "type": "object",
      "properties": {
        "aggregatedAverageRating": {
          "type": "number",
          "format": "double"
        },
        "aggregatedNumberOfReviews": {
          "type": "integer",
          "format": "int32"
        },
        "applicablePromotions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Promotion",
            "originalRef": "Promotion"
          }
        },
        "availableForPickup": {
          "type": "boolean",
          "description": "Flag defining if product is available for pickup"
        },
        "availableServiceProductTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "availableServiceProducts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceProductGroupData",
            "originalRef": "ServiceProductGroupData"
          }
        },
        "availableServiceProductsData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceProductWsDto",
            "originalRef": "ServiceProductWsDto"
          }
        },
        "averageRating": {
          "type": "number",
          "format": "double",
          "description": "Rating number of average value"
        },
        "baseOptions": {
          "type": "array",
          "description": "List of base options related to the product",
          "items": {
            "$ref": "#/definitions/BaseOption",
            "originalRef": "BaseOption"
          }
        },
        "baseProduct": {
          "type": "string",
          "description": "Information about base product"
        },
        "baseProductCode": {
          "type": "string"
        },
        "brandCode": {
          "type": "string",
          "description": "code of the brand from master data"
        },
        "brandName": {
          "type": "string",
          "description": "name of the brand from master data"
        },
        "categories": {
          "type": "array",
          "description": "List of categories product belongs to",
          "items": {
            "$ref": "#/definitions/Category",
            "originalRef": "Category"
          }
        },
        "classifications": {
          "type": "array",
          "description": "List of classifications related to the product",
          "items": {
            "$ref": "#/definitions/Classification",
            "originalRef": "Classification"
          }
        },
        "code": {
          "type": "string",
          "description": "Code of the product"
        },
        "collectionCode": {
          "type": "string",
          "description": "code of the collection from master data"
        },
        "collectionName": {
          "type": "string",
          "description": "name of the collection from master data"
        },
        "colorCode": {
          "type": "string",
          "description": "code of the color from master data"
        },
        "commodityCode": {
          "type": "integer",
          "format": "int64"
        },
        "configurable": {
          "type": "boolean",
          "description": "Flag stating if product is configurable"
        },
        "configuratorType": {
          "type": "string",
          "description": "Configurator type related to the product"
        },
        "countryOfOrigin": {
          "type": "string",
          "description": "iso code of the origin country"
        },
        "crossOutPrice": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "customizable": {
          "type": "boolean"
        },
        "customizableProductCode": {
          "type": "string"
        },
        "customizationBasePrice": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "defaultVariant": {
          "type": "boolean"
        },
        "description": {
          "type": "string",
          "description": "Description of the product"
        },
        "designerCodes": {
          "type": "array",
          "description": "list of the designer's codes",
          "items": {
            "type": "string"
          }
        },
        "dimensions": {
          "$ref": "#/definitions/DimensionsWsDto",
          "originalRef": "DimensionsWsDto"
        },
        "eanOrUpc": {
          "type": "string"
        },
        "erpPlcStatus": {
          "type": "string"
        },
        "exclusiveButVisible": {
          "type": "boolean"
        },
        "exclusivePrice": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "featureDescription": {
          "type": "string"
        },
        "futureStocks": {
          "type": "array",
          "description": "List of future stocks",
          "items": {
            "$ref": "#/definitions/FutureStock",
            "originalRef": "FutureStock"
          }
        },
        "images": {
          "type": "array",
          "description": "List of images linked to product",
          "items": {
            "$ref": "#/definitions/Image",
            "originalRef": "Image"
          }
        },
        "inStoreStock": {
          "type": "integer",
          "format": "int64"
        },
        "isVisible": {
          "type": "boolean"
        },
        "isZipSalesRestricted": {
          "type": "boolean",
          "description": "defines if zip sales restriction is applied"
        },
        "languageSpecificSku": {
          "type": "string"
        },
        "launchDate": {
          "type": "string"
        },
        "manufacturer": {
          "type": "string",
          "description": "Data of product manufacturer"
        },
        "materialCodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxOrderQuantity": {
          "type": "integer",
          "format": "int32"
        },
        "maxPrice": {
          "type": "number",
          "format": "double"
        },
        "metaDescription": {
          "type": "string"
        },
        "minOrderQuantity": {
          "type": "integer",
          "format": "int32"
        },
        "minPrice": {
          "type": "number",
          "format": "double"
        },
        "multidimensional": {
          "type": "boolean",
          "description": "Flag stating if product is multidimentional"
        },
        "name": {
          "type": "string",
          "description": "Name of the product"
        },
        "notShippedTo": {
          "type": "array",
          "description": "country iso codes of blacklisted countries",
          "items": {
            "type": "string"
          }
        },
        "nsn": {
          "type": "string"
        },
        "numberOfReviews": {
          "type": "integer",
          "format": "int32",
          "description": "Number of reviews associated with the product"
        },
        "onlineFrom": {
          "type": "string",
          "format": "date-time",
          "description": "defines when a product should be available"
        },
        "onlyAvailableTo": {
          "type": "string",
          "description": "id of a user group in case it is restricted"
        },
        "originalProductCodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "patternCode": {
          "type": "string",
          "description": "code of the pattern from master data"
        },
        "potentialPromotions": {
          "type": "array",
          "description": "List of potential promotions related to the product",
          "items": {
            "$ref": "#/definitions/Promotion",
            "originalRef": "Promotion"
          }
        },
        "price": {
          "description": "Price of the product",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "priceRange": {
          "description": "Price range assigned to the product",
          "$ref": "#/definitions/PriceRange",
          "originalRef": "PriceRange"
        },
        "prices": {
          "type": "array",
          "description": "Prices per key (identifier, currency, userGroup, netGross) always contains a price without any validity period. It can also contain a price per key with a validity period when the validityFrom is in future or the validityTo is in future. This means that in case 2 prices per key are delivered the valid price needs to be determined based on the validity period. When no price with a validity period is delivered, a prior delivered price with a validity period gets invalid. ",
          "items": {
            "$ref": "#/definitions/PriceWsDto",
            "originalRef": "PriceWsDto"
          }
        },
        "productCareList": {
          "type": "array",
          "description": "list product care ids and their values for specific product",
          "items": {
            "$ref": "#/definitions/ProductCareValueWsDto",
            "originalRef": "ProductCareValueWsDto"
          }
        },
        "productDocuments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductDocumentWsDto",
            "originalRef": "ProductDocumentWsDto"
          }
        },
        "productLifecycle": {
          "type": "string",
          "enum": [
            "NEW",
            "COMING_SOON",
            "PREORDER",
            "REGULAR",
            "DISCONTINUED",
            "ORDER_MADE_ITEM"
          ]
        },
        "productReferences": {
          "type": "array",
          "description": "List of product references",
          "items": {
          }
        },
        "productTags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductTagWsDTO",
            "originalRef": "ProductTagWsDTO"
          }
        },
        "productVariantName": {
          "type": "string"
        },
        "prop65": {
          "type": "boolean",
          "description": "defines if a product contains lead"
        },
        "purchasable": {
          "type": "boolean",
          "description": "Flag defining if product is purchasable"
        },
        "recipeId": {
          "type": "string"
        },
        "reviews": {
          "type": "array",
          "description": "List of reviews associated with the product",
          "items": {
            "$ref": "#/definitions/Review",
            "originalRef": "Review"
          }
        },
        "salesChannel": {
          "type": "string",
          "enum": [
            "WEBSTORE_ONLY",
            "RETAIL_ONLY",
            "OMNICHANNEL"
          ]
        },
        "salesQuantity": {
          "type": "string"
        },
        "shortName": {
          "type": "string"
        },
        "showBackInStockNotification": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "enum": [
            "CHECK",
            "APPROVED",
            "UNAPPROVED"
          ]
        },
        "stock": {
          "description": "Stock value of the product",
          "$ref": "#/definitions/Stock",
          "originalRef": "Stock"
        },
        "summary": {
          "type": "string",
          "description": "Product summary"
        },
        "tags": {
          "type": "array",
          "description": "Tags associated with the product",
          "items": {
            "type": "string"
          }
        },
        "technicalName": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "description": "Url address of the product"
        },
        "variantMatrix": {
          "type": "array",
          "description": "List of variant matrixes associated with the product",
          "items": {
          }
        },
        "variantOptions": {
          "type": "array",
          "description": "List of variant options related to the product",
          "items": {
            "$ref": "#/definitions/VariantOption",
            "originalRef": "VariantOption"
          }
        },
        "variantProducts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variantProductsExtended": {
          "$ref": "#/definitions/VariantProductExtendedWsDto",
          "originalRef": "VariantProductExtendedWsDto"
        },
        "variantType": {
          "type": "string",
          "description": "Variant type of the product"
        },
        "variants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeaturesToFeatureValueMappingDataWsDto",
            "originalRef": "FeaturesToFeatureValueMappingDataWsDto"
          }
        },
        "volumePrices": {
          "type": "array",
          "description": "List of volume prices",
          "items": {
            "$ref": "#/definitions/Price",
            "originalRef": "Price"
          }
        },
        "volumePricesFlag": {
          "type": "boolean",
          "description": "Flag stating if volume price should be displayed"
        },
        "warrantyInformation": {
          "type": "string"
        }
      },
      "title": "ProductWsDTO",
      "description": "<p>This model is based on the Hybris OOTB implementation. Therefore, some properties areunused or the wording differs. These properties are documented in the following:</p><h3>Wording:</h3><ul><li>code = productId</li><li>summary = shortDescription</li><li>description = longDescription</li><li>purchasable = canBePurchased</li></ul><h3>Unused Properties</h3><p>The following unused properties won't be filled with data and can be ignored (Also won't be serialized).</p> <ul><li>purchasable</li><li>futureStocks</li><li>availableForPickup</li><li>manufacturer</li><li>price(handled separately in price export)</li><li>volumePricesFlag</li><li>volumePrices</li><li>priceRange</li><li>multidimensional</li></ul><li>review (provided via separate endpoint)</li></ul><h3>Potential properties</h3><p>In future the following attributes might be used:</p><ol><li>variantType</li><li>variantOptions</li><li>baseProduct</li><li>baseOptions</li><li>variantMatrix</li><li>potentialPromotions</li><li>productReferences</li></ol>"
    },
    "Promotion": {
      "type": "object",
      "properties": {
        "baseStore": {
          "type": "string"
        },
        "buyAmount": {
          "type": "integer",
          "format": "int64"
        },
        "code": {
          "type": "string",
          "description": "Code of the promotion"
        },
        "couldFireMessages": {
          "type": "array",
          "description": "Message about promotion which is displayed when planning potential promotion. This field has higher priority over promotion description",
          "items": {
            "type": "string"
          }
        },
        "currency": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Description of the promotion"
        },
        "discountedAmount": {
          "type": "integer",
          "format": "int64"
        },
        "enabled": {
          "type": "boolean",
          "description": "Boolean flag if promotion is enabled"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "Last date of validity of the promotion"
        },
        "excludedUserGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "firedMessages": {
          "type": "array",
          "description": "Message fired while the promotion is active. This is info how much you will get when applying the promotion",
          "items": {
            "type": "string"
          }
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "Priority index as numeric value of the promotion. Higher number means higher priority"
        },
        "productBanner": {
          "description": "Image banner of the promotion",
          "$ref": "#/definitions/Image",
          "originalRef": "Image"
        },
        "promotionGroup": {
          "type": "string",
          "description": "Group of the promotion"
        },
        "promotionType": {
          "type": "string",
          "description": "Type of the promotion"
        },
        "restrictions": {
          "type": "array",
          "description": "List of promotion restrictions",
          "items": {
            "$ref": "#/definitions/PromotionRestriction",
            "originalRef": "PromotionRestriction"
          }
        },
        "salesChannel": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "The initial date of the promotion"
        },
        "title": {
          "type": "string",
          "description": "Promotion title"
        },
        "totalPromotionDiscount": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "userGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "value": {
          "type": "number",
          "format": "double"
        },
        "voucherCode": {
          "type": "string"
        }
      },
      "title": "Promotion",
      "description": "Representation of a Promotion"
    },
    "PromotionList": {
      "type": "object",
      "properties": {
        "promotions": {
          "type": "array",
          "description": "List of promotions",
          "items": {
            "$ref": "#/definitions/Promotion",
            "originalRef": "Promotion"
          }
        }
      },
      "title": "PromotionList",
      "description": "Representation of a Promotion list"
    },
    "PromotionOrderEntryConsumed": {
      "type": "object",
      "properties": {
        "adjustedUnitPrice": {
          "type": "number",
          "format": "double",
          "description": "Adjusted unit price for promotion order entry"
        },
        "adjustedUnitPriceFormatted": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "code": {
          "type": "string",
          "description": "Order entry code"
        },
        "orderEntryNumber": {
          "type": "integer",
          "format": "int32",
          "description": "Order entry number"
        },
        "quantity": {
          "type": "integer",
          "format": "int64",
          "description": "Quantity of promotion order entry"
        }
      },
      "title": "PromotionOrderEntryConsumed",
      "description": "Representation of a Promotion order entry consumed"
    },
    "PromotionRestriction": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the promotion restriction"
        },
        "restrictionType": {
          "type": "string",
          "description": "Type of the promotion restriction"
        }
      },
      "title": "PromotionRestriction",
      "description": "Representation of a Promotion Restriction"
    },
    "PromotionResult": {
      "type": "object",
      "properties": {
        "consumedEntries": {
          "type": "array",
          "description": "List of promotion order entries consumed",
          "items": {
            "$ref": "#/definitions/PromotionOrderEntryConsumed",
            "originalRef": "PromotionOrderEntryConsumed"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of promotion result"
        },
        "promotion": {
          "description": "Promotion information for given promotion result",
          "$ref": "#/definitions/Promotion",
          "originalRef": "Promotion"
        }
      },
      "title": "PromotionResult",
      "description": "Representation of a Promotion result"
    },
    "PromotionResultList": {
      "type": "object",
      "properties": {
        "promotions": {
          "type": "array",
          "description": "List of promotion results",
          "items": {
            "$ref": "#/definitions/PromotionResult",
            "originalRef": "PromotionResult"
          }
        }
      },
      "title": "PromotionResultList",
      "description": "Representation of a Promotion result list"
    },
    "Region": {
      "type": "object",
      "properties": {
        "countryIso": {
          "type": "string",
          "description": "Country code in iso format"
        },
        "isocode": {
          "type": "string",
          "description": "Country and Region code in iso format"
        },
        "isocodeShort": {
          "type": "string",
          "description": "Region code in short iso form"
        },
        "name": {
          "type": "string",
          "description": "Name of the region"
        }
      },
      "title": "Region",
      "description": "Response body fields which will be returned while fetching the list of country's regions."
    },
    "RegionDto": {
      "type": "object",
      "properties": {
        "isoCode": {
          "type": "string",
          "xml": {
            "name": "isoCode",
            "attribute": false,
            "wrapped": false
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "name": "name",
            "attribute": false,
            "wrapped": false
          }
        }
      },
      "title": "RegionDto"
    },
    "RegionListWsDTO": {
      "type": "object",
      "properties": {
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Region",
            "originalRef": "Region"
          }
        }
      },
      "title": "RegionListWsDTO"
    },
    "RemoveEntryFromCartResultWsDTO": {
      "type": "object",
      "properties": {
        "cart": {
          "$ref": "#/definitions/Cart",
          "originalRef": "Cart"
        },
        "removedCartEntry": {
          "$ref": "#/definitions/OrderEntry",
          "originalRef": "OrderEntry"
        }
      },
      "title": "RemoveEntryFromCartResultWsDTO"
    },
    "RestrictedZipCodeListWsDTO": {
      "type": "object",
      "properties": {
        "zipCodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RestrictedZipCodeWsDto",
            "originalRef": "RestrictedZipCodeWsDto"
          }
        }
      },
      "title": "RestrictedZipCodeListWsDTO"
    },
    "RestrictedZipCodeWsDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        }
      },
      "title": "RestrictedZipCodeWsDto"
    },
    "ReturnRequestReasonDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "xml": {
            "name": "code",
            "attribute": false,
            "wrapped": false
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "name": "name",
            "attribute": false,
            "wrapped": false
          }
        }
      },
      "title": "ReturnRequestReasonDto"
    },
    "Review": {
      "type": "object",
      "properties": {
        "alias": {
          "type": "string",
          "description": "Alias name for the review"
        },
        "classifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Classification",
            "originalRef": "Classification"
          }
        },
        "comment": {
          "type": "string",
          "description": "Review comment"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "Date of the review"
        },
        "headline": {
          "type": "string",
          "description": "Review headline"
        },
        "id": {
          "type": "string",
          "description": "Identifier of review"
        },
        "language": {
          "$ref": "#/definitions/Language",
          "originalRef": "Language"
        },
        "principal": {
          "description": "Person related to the review",
          "$ref": "#/definitions/User",
          "originalRef": "User"
        },
        "rating": {
          "type": "number",
          "format": "double",
          "description": "Review rating value"
        }
      },
      "title": "Review",
      "description": "Representation of a Review"
    },
    "ReviewList": {
      "type": "object",
      "properties": {
        "aggregatedAverageRating": {
          "type": "number",
          "format": "double"
        },
        "aggregatedRatingSummary": {
          "$ref": "#/definitions/ReviewSummaryDataWsDTO",
          "originalRef": "ReviewSummaryDataWsDTO"
        },
        "aggregatedTotalCount": {
          "type": "integer",
          "format": "int32"
        },
        "averageRating": {
          "type": "number",
          "format": "double"
        },
        "pagination": {
          "$ref": "#/definitions/pagination",
          "originalRef": "pagination"
        },
        "ratingSummary": {
          "$ref": "#/definitions/ReviewSummaryDataWsDTO",
          "originalRef": "ReviewSummaryDataWsDTO"
        },
        "reviews": {
          "type": "array",
          "description": "List of reviews",
          "items": {
            "$ref": "#/definitions/Review",
            "originalRef": "Review"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "ReviewList",
      "description": "Representation of a Review List"
    },
    "ReviewSummaryDataWsDTO": {
      "type": "object",
      "properties": {
        "rating1": {
          "type": "integer",
          "format": "int32"
        },
        "rating2": {
          "type": "integer",
          "format": "int32"
        },
        "rating3": {
          "type": "integer",
          "format": "int32"
        },
        "rating4": {
          "type": "integer",
          "format": "int32"
        },
        "rating5": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "ReviewSummaryDataWsDTO"
    },
    "SaveCartResult": {
      "type": "object",
      "properties": {
        "savedCartData": {
          "description": "Cart data information for saved cart",
          "$ref": "#/definitions/Cart",
          "originalRef": "Cart"
        }
      },
      "title": "SaveCartResult",
      "description": "Representation of a Save Cart Result"
    },
    "SearchQuery": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Value of search query"
        }
      },
      "title": "SearchQuery",
      "description": "Representation of a Search Query"
    },
    "SearchState": {
      "type": "object",
      "properties": {
        "query": {
          "description": "Query of search state",
          "$ref": "#/definitions/SearchQuery",
          "originalRef": "SearchQuery"
        },
        "url": {
          "type": "string",
          "description": "Url address of search state"
        }
      },
      "title": "SearchState",
      "description": "Representation of a Search State"
    },
    "ServiceProductEntriesWsDTO": {
      "type": "object",
      "properties": {
        "serviceProductEntries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceProductEntryWsDTO",
            "originalRef": "ServiceProductEntryWsDTO"
          }
        }
      },
      "title": "ServiceProductEntriesWsDTO"
    },
    "ServiceProductEntryWsDTO": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "detailedDescription": {
          "type": "string"
        },
        "shortDescription": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceProductValueWsDTO",
            "originalRef": "ServiceProductValueWsDTO"
          }
        }
      },
      "title": "ServiceProductEntryWsDTO"
    },
    "ServiceProductGroupData": {
      "type": "object",
      "properties": {
        "serviceProductType": {
          "type": "string"
        },
        "serviceProducts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "ServiceProductGroupData"
    },
    "ServiceProductListWsDto": {
      "type": "object",
      "properties": {
        "catalog": {
          "type": "string"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "serviceProducts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceProductWsDto",
            "originalRef": "ServiceProductWsDto"
          }
        },
        "totalPageCount": {
          "type": "integer",
          "format": "int32"
        },
        "totalServiceProductCount": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ServiceProductListWsDto"
    },
    "ServiceProductOptionWsDto": {
      "type": "object",
      "properties": {
        "fontOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FontOptionWsDto",
            "originalRef": "FontOptionWsDto"
          }
        },
        "iconOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IconOptionWsDto",
            "originalRef": "IconOptionWsDto"
          }
        },
        "id": {
          "type": "string"
        },
        "maxChars": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "ServiceProductOptionWsDto"
    },
    "ServiceProductOrderEntryDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "xml": {
            "name": "code",
            "attribute": false,
            "wrapped": false
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "name": "name",
            "attribute": false,
            "wrapped": false
          }
        },
        "netUnitBasePriceIncludingDiscounts": {
          "xml": {
            "name": "netUnitBasePriceIncludingDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "serviceProductEntryDetailedDescription": {
          "type": "string",
          "xml": {
            "name": "serviceProductEntryDetailedDescription",
            "attribute": false,
            "wrapped": false
          }
        },
        "serviceProductEntryShortDescription": {
          "type": "string",
          "xml": {
            "name": "serviceProductEntryShortDescription",
            "attribute": false,
            "wrapped": false
          }
        },
        "serviceProductEntryTaxes": {
          "type": "array",
          "xml": {
            "name": "tax",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/TaxDto",
            "originalRef": "TaxDto"
          }
        },
        "serviceProductType": {
          "type": "string",
          "xml": {
            "name": "serviceProductType",
            "attribute": false,
            "wrapped": false
          }
        },
        "serviceProductValues": {
          "type": "array",
          "xml": {
            "name": "serviceProductValue",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/ServiceProductValueDto",
            "originalRef": "ServiceProductValueDto"
          }
        },
        "totalServiceProductEntryTax": {
          "xml": {
            "name": "totalServiceProductEntryTax",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalServiceProductEntryTaxPercentage": {
          "type": "number",
          "format": "double",
          "xml": {
            "name": "totalServiceProductEntryTaxPercentage",
            "attribute": false,
            "wrapped": false
          }
        },
        "unitBasePrice": {
          "xml": {
            "name": "unitBasePrice",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        }
      },
      "title": "ServiceProductOrderEntryDto"
    },
    "ServiceProductOrderEntryWsDTO": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "detailedDescription": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "shortDescription": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceProductValueWsDTO",
            "originalRef": "ServiceProductValueWsDTO"
          }
        }
      },
      "title": "ServiceProductOrderEntryWsDTO"
    },
    "ServiceProductPriceListWsDTO": {
      "type": "object",
      "properties": {
        "serviceProductPrices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceProductPriceWsDto",
            "originalRef": "ServiceProductPriceWsDto"
          }
        }
      },
      "title": "ServiceProductPriceListWsDTO"
    },
    "ServiceProductPriceWsDto": {
      "type": "object",
      "properties": {
        "prices": {
          "type": "array",
          "description": "Prices per key (identifier, currency, userGroup, netGross) always contains a price without any validity period. It can also contain a price per key with a validity period when the validityFrom is in future or the validityTo is in future. This means that in case 2 prices per key are delivered the valid price needs to be determined based on the validity period. When no price with a validity period is delivered, a prior delivered price with a validity period gets invalid. ",
          "items": {
            "$ref": "#/definitions/PriceWsDto",
            "originalRef": "PriceWsDto"
          }
        },
        "serviceProductId": {
          "type": "string"
        }
      },
      "title": "ServiceProductPriceWsDto"
    },
    "ServiceProductValueDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "xml": {
            "name": "code",
            "attribute": false,
            "wrapped": false
          }
        },
        "value": {
          "type": "string",
          "xml": {
            "name": "value",
            "attribute": false,
            "wrapped": false
          }
        }
      },
      "title": "ServiceProductValueDto"
    },
    "ServiceProductValueWsDTO": {
      "type": "object",
      "properties": {
        "optionCode": {
          "type": "string"
        },
        "optionValue": {
          "type": "string"
        }
      },
      "title": "ServiceProductValueWsDTO"
    },
    "ServiceProductWsDto": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "code": {
          "type": "string"
        },
        "crossOutPrice": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "priceWithProduct": {
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "serviceProductOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceProductOptionWsDto",
            "originalRef": "ServiceProductOptionWsDto"
          }
        },
        "type": {
          "type": "string"
        }
      },
      "title": "ServiceProductWsDto"
    },
    "ShipmentConsignmentDto": {
      "type": "object",
      "properties": {
        "carrierCode": {
          "type": "string",
          "xml": {
            "name": "CarrierCode",
            "attribute": false,
            "wrapped": false
          }
        },
        "carrierDescription": {
          "type": "string",
          "xml": {
            "name": "CarrierDescription",
            "attribute": false,
            "wrapped": false
          }
        },
        "code": {
          "type": "string",
          "xml": {
            "name": "Code",
            "attribute": false,
            "wrapped": false
          }
        },
        "entries": {
          "type": "array",
          "xml": {
            "name": "Entries",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/ShipmentConsignmentEntryDto",
            "originalRef": "ShipmentConsignmentEntryDto"
          }
        },
        "shipTrackingNumber": {
          "type": "string",
          "xml": {
            "name": "ShipTrackingNumber",
            "attribute": false,
            "wrapped": false
          }
        },
        "shippingDate": {
          "type": "string",
          "xml": {
            "name": "DateTime",
            "attribute": false,
            "wrapped": false
          }
        },
        "shippingMethod": {
          "type": "string",
          "xml": {
            "name": "ShippingMethod",
            "attribute": false,
            "wrapped": false
          }
        },
        "status": {
          "type": "string",
          "xml": {
            "name": "Status",
            "attribute": false,
            "wrapped": false
          }
        }
      },
      "title": "ShipmentConsignmentDto",
      "xml": {
        "name": "Consignment",
        "attribute": false,
        "wrapped": false
      }
    },
    "ShipmentConsignmentEntryDto": {
      "type": "object",
      "properties": {
        "orderLineNumber": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "OrderLineNumber",
            "attribute": false,
            "wrapped": false
          }
        },
        "productId": {
          "type": "string",
          "xml": {
            "name": "ProductID",
            "attribute": false,
            "wrapped": false
          }
        },
        "shipQuantity": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "ShipQuantity",
            "attribute": false,
            "wrapped": false
          }
        }
      },
      "title": "ShipmentConsignmentEntryDto",
      "xml": {
        "name": "ConsignmentEntry",
        "attribute": false,
        "wrapped": false
      }
    },
    "ShippedEntriesDto": {
      "type": "object",
      "properties": {
        "consignmentCodes": {
          "type": "array",
          "xml": {
            "name": "code",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "type": "string"
          }
        },
        "deliveryCost": {
          "xml": {
            "name": "deliveryCost",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "deliveryCostWithoutTax": {
          "xml": {
            "name": "deliveryCostWithoutTax",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "entries": {
          "type": "array",
          "xml": {
            "name": "orderEntry",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/OrderEntryDto",
            "originalRef": "OrderEntryDto"
          }
        },
        "fullGivexAmount": {
          "xml": {
            "name": "fullGivexAmount",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "orderDiscounts": {
          "xml": {
            "name": "orderDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "productDiscounts": {
          "xml": {
            "name": "productDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "shippingTaxes": {
          "type": "array",
          "xml": {
            "name": "tax",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/TaxDto",
            "originalRef": "TaxDto"
          }
        },
        "subTotal": {
          "xml": {
            "name": "subTotal",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "subTotalWithoutOrderDiscounts": {
          "xml": {
            "name": "subTotalWithoutOrderDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "subTotalWithoutTotalDiscounts": {
          "xml": {
            "name": "subTotalWithoutTotalDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalDiscounts": {
          "xml": {
            "name": "totalDiscounts",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalPrice": {
          "xml": {
            "name": "totalPrice",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalPriceWithTax": {
          "xml": {
            "name": "totalPriceWithTax",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalShippingTax": {
          "xml": {
            "name": "totalShippingTax",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalShippingTaxPercentage": {
          "type": "number",
          "format": "double",
          "xml": {
            "name": "totalShippingTaxPercentage",
            "attribute": false,
            "wrapped": false
          }
        },
        "totalTax": {
          "xml": {
            "name": "totalTax",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "totalTaxPercentage": {
          "type": "number",
          "format": "double",
          "xml": {
            "name": "totalTaxPercentage",
            "attribute": false,
            "wrapped": false
          }
        },
        "totalTaxes": {
          "type": "array",
          "xml": {
            "name": "tax",
            "attribute": false,
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/TaxDto",
            "originalRef": "TaxDto"
          }
        },
        "usedGivexAmount": {
          "xml": {
            "name": "usedGivexAmount",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "voucherDiscount": {
          "xml": {
            "name": "voucherDiscount",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        }
      },
      "title": "ShippedEntriesDto"
    },
    "SimplifiedColorListWsDTO": {
      "type": "object",
      "properties": {
        "simplifiedColors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SimplifiedColorWsDto",
            "originalRef": "SimplifiedColorWsDto"
          }
        }
      },
      "title": "SimplifiedColorListWsDTO"
    },
    "SimplifiedColorWsDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "SimplifiedColorWsDto"
    },
    "SiteConfigurationWsDto": {
      "type": "object",
      "properties": {
        "catalogId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "siteId": {
          "type": "string"
        }
      },
      "title": "SiteConfigurationWsDto"
    },
    "SolrSearchResultWsDto": {
      "type": "object",
      "properties": {
        "facets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Facet",
            "originalRef": "Facet"
          }
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int64"
        },
        "products": {
          "type": "array",
          "items": {
          }
        }
      },
      "title": "SolrSearchResultWsDto"
    },
    "Sort": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Code of Sort"
        },
        "name": {
          "type": "string",
          "description": "Name of Sort"
        },
        "selected": {
          "type": "boolean",
          "description": "Flag stating when Sort is selected"
        }
      },
      "title": "Sort",
      "description": "Representation a Sort option"
    },
    "SpecialOpeningDay": {
      "type": "object",
      "properties": {
        "closed": {
          "type": "boolean",
          "description": "Flag stating if special opening day is closed"
        },
        "closingTime": {
          "description": "Closing time of opening day",
          "$ref": "#/definitions/Time",
          "originalRef": "Time"
        },
        "comment": {
          "type": "string",
          "description": "Comment field"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "Date of special opening day"
        },
        "formattedDate": {
          "type": "string",
          "description": "Text representation of the date of special opening day"
        },
        "name": {
          "type": "string",
          "description": "Name of the special opening day event"
        },
        "openingTime": {
          "description": "Starting time of opening day",
          "$ref": "#/definitions/Time",
          "originalRef": "Time"
        }
      },
      "title": "SpecialOpeningDay",
      "description": "Representation of a special opening day"
    },
    "SpellingSuggestion": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "Query for spelling suggestion"
        },
        "suggestion": {
          "type": "string",
          "description": "Spelling suggestion"
        }
      },
      "title": "SpellingSuggestion",
      "description": "Representation of a Spell Checker Suggestion"
    },
    "StatusSummary": {
      "type": "object",
      "properties": {
        "numberOfIssues": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "Number of issues per status"
        },
        "status": {
          "type": "string",
          "example": "ERROR",
          "description": "Status or severity indicator, can be one of ERROR, WARNING, INFO or SUCCESS"
        }
      },
      "title": "StatusSummary",
      "description": "Representation of a status summary, an aggregated view on issues for a specific status or severity. These issues are attached to configurations of products or order entries"
    },
    "Stock": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "isValueRounded": {
          "type": "boolean",
          "description": "Indicate whether Stock level value is rounded"
        },
        "stockLevel": {
          "type": "integer",
          "format": "int64",
          "description": "Stock level expressed as number"
        },
        "stockLevelStatus": {
          "type": "string",
          "description": "Status of stock level"
        }
      },
      "title": "Stock",
      "description": "Representation of a Stock"
    },
    "StoreFinderSearchPage": {
      "type": "object",
      "properties": {
        "boundEastLongitude": {
          "type": "number",
          "format": "double",
          "description": "Bound east longitude"
        },
        "boundNorthLatitude": {
          "type": "number",
          "format": "double",
          "description": "Bound north latitude"
        },
        "boundSouthLatitude": {
          "type": "number",
          "format": "double",
          "description": "Bound south latitude"
        },
        "boundWestLongitude": {
          "type": "number",
          "format": "double",
          "description": "Bound west longitude"
        },
        "locationText": {
          "type": "string",
          "description": "Location text"
        },
        "pagination": {
          "description": "Pagination",
          "$ref": "#/definitions/deprecatedPagination",
          "originalRef": "deprecatedPagination"
        },
        "sorts": {
          "type": "array",
          "description": "List of sortings",
          "items": {
            "$ref": "#/definitions/Sort",
            "originalRef": "Sort"
          }
        },
        "sourceLatitude": {
          "type": "number",
          "format": "double",
          "description": "Source latitude"
        },
        "sourceLongitude": {
          "type": "number",
          "format": "double",
          "description": "Source longitude"
        },
        "stores": {
          "type": "array",
          "description": "List of stores",
          "items": {
            "$ref": "#/definitions/PointOfService",
            "originalRef": "PointOfService"
          }
        }
      },
      "title": "StoreFinderSearchPage",
      "description": "Representation of a Store finder search page"
    },
    "StoreFinderStockSearchPage": {
      "type": "object",
      "properties": {
        "boundEastLongitude": {
          "type": "number",
          "format": "double",
          "description": "Bound to east longitude"
        },
        "boundNorthLatitude": {
          "type": "number",
          "format": "double",
          "description": "Bound to north latitude"
        },
        "boundSouthLatitude": {
          "type": "number",
          "format": "double",
          "description": "Bound to south latitude"
        },
        "boundWestLongitude": {
          "type": "number",
          "format": "double",
          "description": "Bound to west longitude"
        },
        "locationText": {
          "type": "string",
          "description": "Location text"
        },
        "pagination": {
          "description": "Pagination",
          "$ref": "#/definitions/deprecatedPagination",
          "originalRef": "deprecatedPagination"
        },
        "product": {
          "description": "Product"
        },
        "sorts": {
          "type": "array",
          "description": "List of sorts",
          "items": {
            "$ref": "#/definitions/Sort",
            "originalRef": "Sort"
          }
        },
        "sourceLatitude": {
          "type": "number",
          "format": "double",
          "description": "Source latitude"
        },
        "sourceLongitude": {
          "type": "number",
          "format": "double",
          "description": "Source longitude"
        },
        "stores": {
          "type": "array",
          "description": "List of stores",
          "items": {
            "$ref": "#/definitions/PointOfServiceStock",
            "originalRef": "PointOfServiceStock"
          }
        }
      },
      "title": "StoreFinderStockSearchPage",
      "description": "Representation of a Store Finder Stock Search Page"
    },
    "Suggestion": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Suggestion value"
        }
      },
      "title": "Suggestion",
      "description": "Representation of a Suggestion"
    },
    "SuggestionList": {
      "type": "object",
      "properties": {
        "suggestions": {
          "type": "array",
          "description": "List of suggestions",
          "items": {
            "$ref": "#/definitions/Suggestion",
            "originalRef": "Suggestion"
          }
        }
      },
      "title": "SuggestionList",
      "description": "Representation of a Suggestion List"
    },
    "TagDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "xml": {
            "name": "code",
            "attribute": false,
            "wrapped": false
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "name": "name",
            "attribute": false,
            "wrapped": false
          }
        }
      },
      "title": "TagDto"
    },
    "TaxDto": {
      "type": "object",
      "properties": {
        "absolute": {
          "xml": {
            "name": "absolute",
            "attribute": false,
            "wrapped": false
          },
          "$ref": "#/definitions/CostDto",
          "originalRef": "CostDto"
        },
        "jurisdiction": {
          "type": "string",
          "xml": {
            "name": "jurisdiction",
            "attribute": false,
            "wrapped": false
          }
        },
        "percentage": {
          "type": "number",
          "format": "double",
          "xml": {
            "name": "percentage",
            "attribute": false,
            "wrapped": false
          }
        },
        "taxIdentifier": {
          "type": "string",
          "xml": {
            "name": "taxIdentifier",
            "attribute": false,
            "wrapped": false
          }
        },
        "taxType": {
          "type": "string",
          "xml": {
            "name": "taxType",
            "attribute": false,
            "wrapped": false
          }
        }
      },
      "title": "TaxDto"
    },
    "Time": {
      "type": "object",
      "properties": {
        "formattedHour": {
          "type": "string",
          "description": "Formatted hour"
        },
        "hour": {
          "type": "integer",
          "format": "int32",
          "description": "Hour part of the time data",
          "minimum": -128,
          "maximum": 127
        },
        "minute": {
          "type": "integer",
          "format": "int32",
          "description": "Minute part of the time data",
          "minimum": -128,
          "maximum": 127
        }
      },
      "title": "Time",
      "description": "Representation of a Time"
    },
    "Title": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Title code"
        },
        "name": {
          "type": "string",
          "description": "Title name"
        }
      },
      "title": "Title",
      "description": "Representation of a Title"
    },
    "TitleList": {
      "type": "object",
      "properties": {
        "titles": {
          "type": "array",
          "description": "List of titles",
          "items": {
            "$ref": "#/definitions/Title",
            "originalRef": "Title"
          }
        }
      },
      "title": "TitleList",
      "description": "Representation of a Title List"
    },
    "UpdateServiceProductEntryWsDTO": {
      "type": "object",
      "properties": {
        "detailedDescription": {
          "type": "string"
        },
        "shortDescription": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceProductValueWsDTO",
            "originalRef": "ServiceProductValueWsDTO"
          }
        }
      },
      "title": "UpdateServiceProductEntryWsDTO"
    },
    "User": {
      "type": "object",
      "properties": {
        "currency": {
          "description": "User preferred currency",
          "$ref": "#/definitions/Currency",
          "originalRef": "Currency"
        },
        "customerId": {
          "type": "string",
          "description": "Customer identifier"
        },
        "deactivationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Deactivation date"
        },
        "defaultAddress": {
          "description": "User address",
          "$ref": "#/definitions/Address",
          "originalRef": "Address"
        },
        "displayUid": {
          "type": "string",
          "description": "User identifier"
        },
        "firstName": {
          "type": "string",
          "description": "User first name"
        },
        "language": {
          "description": "User preferred language",
          "$ref": "#/definitions/Language",
          "originalRef": "Language"
        },
        "lastName": {
          "type": "string",
          "description": "User last name"
        },
        "name": {
          "type": "string",
          "description": "Name of the user"
        },
        "title": {
          "type": "string",
          "description": "User title"
        },
        "titleCode": {
          "type": "string",
          "description": "User title code"
        },
        "uid": {
          "type": "string",
          "description": "Unique user identifier"
        }
      },
      "title": "User",
      "description": "Representation of an User"
    },
    "UserDto": {
      "type": "object",
      "properties": {
        "customerId": {
          "type": "string",
          "xml": {
            "name": "customerId",
            "attribute": false,
            "wrapped": false
          }
        },
        "userGroup": {
          "type": "string",
          "xml": {
            "name": "userGroup",
            "attribute": false,
            "wrapped": false
          }
        }
      },
      "title": "UserDto"
    },
    "UserGroup": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "description": "List of members",
          "items": {
            "$ref": "#/definitions/Principal",
            "originalRef": "Principal"
          }
        },
        "membersCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of members"
        },
        "name": {
          "type": "string",
          "description": "Name of the user"
        },
        "subGroups": {
          "type": "array",
          "description": "List of subgroups",
          "items": {
          }
        },
        "uid": {
          "type": "string",
          "description": "Unique user identifier"
        }
      },
      "title": "UserGroup",
      "description": "Representation of an User Group"
    },
    "UserGroupList": {
      "type": "object",
      "properties": {
        "currentPage": {
          "type": "integer",
          "format": "int32",
          "description": "Current page"
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32",
          "description": "Number of pages"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Page size"
        },
        "totalNumber": {
          "type": "integer",
          "format": "int32",
          "description": "Total number"
        },
        "userGroups": {
          "type": "array",
          "description": "List of user groups",
          "items": {
          }
        }
      },
      "title": "UserGroupList",
      "description": "Representation of an User Group List"
    },
    "UserSignUp": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "password",
        "uid"
      ],
      "properties": {
        "firstName": {
          "type": "string",
          "description": "first name of the user"
        },
        "lastName": {
          "type": "string",
          "description": "last name of the user"
        },
        "password": {
          "type": "string",
          "description": "user password"
        },
        "titleCode": {
          "type": "string"
        },
        "uid": {
          "type": "string",
          "description": "user id, unique string required to create new user. It can be email"
        }
      },
      "title": "UserSignUp",
      "description": "Representation of an UserSignUp. Consists of fields required to register new customer"
    },
    "VariantCategory": {
      "type": "object",
      "properties": {
        "hasImage": {
          "type": "boolean",
          "description": "Flag if varian category has image assigned"
        },
        "name": {
          "type": "string",
          "description": "Variant category name"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "Priority number of variant category"
        }
      },
      "title": "VariantCategory",
      "description": "Representation of a Variant Category"
    },
    "VariantMatrixElement": {
      "type": "object",
      "properties": {
        "elements": {
          "type": "array",
          "description": "List of elements with the type of variant matrix element",
          "items": {
          }
        },
        "isLeaf": {
          "type": "boolean"
        },
        "parentVariantCategory": {
          "description": "Parent variant category for variant matrix element",
          "$ref": "#/definitions/VariantCategory",
          "originalRef": "VariantCategory"
        },
        "variantOption": {
          "description": "Variant option for variant matrix element",
          "$ref": "#/definitions/VariantOption",
          "originalRef": "VariantOption"
        },
        "variantValueCategory": {
          "description": "Variant value category for variant matrix element",
          "$ref": "#/definitions/VariantValueCategory",
          "originalRef": "VariantValueCategory"
        }
      },
      "title": "VariantMatrixElement",
      "description": "Representation of a Variant Matrix Element"
    },
    "VariantOption": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Code of the variant option"
        },
        "priceData": {
          "description": "Price data information of the variant option",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "stock": {
          "description": "Stock value of the variant option",
          "$ref": "#/definitions/Stock",
          "originalRef": "Stock"
        },
        "url": {
          "type": "string",
          "description": "Url address of the variant option"
        },
        "variantOptionQualifiers": {
          "type": "array",
          "description": "List of variant option qualifiers",
          "items": {
            "$ref": "#/definitions/VariantOptionQualifier",
            "originalRef": "VariantOptionQualifier"
          }
        }
      },
      "title": "VariantOption",
      "description": "Representation of a Variant Option"
    },
    "VariantOptionQualifier": {
      "type": "object",
      "properties": {
        "image": {
          "description": "Image associated with variant option qualifier",
          "$ref": "#/definitions/Image",
          "originalRef": "Image"
        },
        "name": {
          "type": "string",
          "description": "Name of variant option qualifier"
        },
        "qualifier": {
          "type": "string",
          "description": "Qualifier"
        },
        "value": {
          "type": "string",
          "description": "Value of variant option qualifier"
        }
      },
      "title": "VariantOptionQualifier",
      "description": "Representation of a Variant Option Qualifier"
    },
    "VariantProductExtendedWsDto": {
      "type": "object",
      "properties": {
        "productVariantType": {
          "type": "string"
        },
        "variantProducts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "VariantProductExtendedWsDto"
    },
    "VariantValueCategory": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the variant value category"
        },
        "sequence": {
          "type": "integer",
          "format": "int32",
          "description": "Sequence number of variant value category"
        },
        "superCategories": {
          "type": "array",
          "description": "Parent category of variant value category",
          "items": {
            "$ref": "#/definitions/VariantCategory",
            "originalRef": "VariantCategory"
          }
        }
      },
      "title": "VariantValueCategory",
      "description": "Representation of a Variant Value Category"
    },
    "Voucher": {
      "type": "object",
      "properties": {
        "appliedValue": {
          "description": "Applied value when using this voucher",
          "$ref": "#/definitions/Price",
          "originalRef": "Price"
        },
        "code": {
          "type": "string",
          "description": "The identifier of the Voucher. This is the first part of voucher code which holds first 3 letters, like: 123"
        },
        "currency": {
          "description": "Currency of the voucher",
          "$ref": "#/definitions/Currency",
          "originalRef": "Currency"
        },
        "description": {
          "type": "string",
          "description": "Description of the voucher"
        },
        "freeShipping": {
          "type": "boolean",
          "description": "Specifies if the order this voucher is applied to is shipped for free (true) or not (false). Defaults to false."
        },
        "name": {
          "type": "string",
          "description": "Name of the voucher"
        },
        "value": {
          "type": "number",
          "format": "double",
          "description": "Value of the voucher. Example of such value is: 15.0d"
        },
        "valueFormatted": {
          "type": "string",
          "description": "Formatted value of the voucher"
        },
        "valueString": {
          "type": "string",
          "description": "The value of the voucher to display. Example: 15.0%"
        },
        "voucherCode": {
          "type": "string",
          "description": "Voucher code, is the holder for keeping specific occasional voucher related to business usage. It can be generated and looks like: 123-H8BC-Y3D5-34AL"
        }
      },
      "title": "Voucher",
      "description": "Representation of a Voucher"
    },
    "VoucherList": {
      "type": "object",
      "properties": {
        "vouchers": {
          "type": "array",
          "description": "List of vouchers",
          "items": {
            "$ref": "#/definitions/Voucher",
            "originalRef": "Voucher"
          }
        }
      },
      "title": "VoucherList",
      "description": "Representation of a Voucher List"
    },
    "WeekdayOpeningDay": {
      "type": "object",
      "properties": {
        "closed": {
          "type": "boolean",
          "description": "Flag stating if weekday opening day is closed"
        },
        "closingTime": {
          "description": "Closing time of opening day",
          "$ref": "#/definitions/Time",
          "originalRef": "Time"
        },
        "openingTime": {
          "description": "Starting time of opening day",
          "$ref": "#/definitions/Time",
          "originalRef": "Time"
        },
        "weekDay": {
          "type": "string",
          "description": "Text representation of week day opening day"
        }
      },
      "title": "WeekdayOpeningDay",
      "description": "Representation of a Weekday Opening Day"
    },
    "WishlistEntryWsDTO": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "product": {
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "WishlistEntryWsDTO"
    },
    "WishlistListWsDTO": {
      "type": "object",
      "properties": {
        "wishlists": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WishlistWsDTO",
            "originalRef": "WishlistWsDTO"
          }
        }
      },
      "title": "WishlistListWsDTO"
    },
    "WishlistWsDTO": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WishlistEntryWsDTO",
            "originalRef": "WishlistEntryWsDTO"
          }
        },
        "guid": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "WishlistWsDTO"
    },
    "deprecatedPagination": {
      "type": "object",
      "properties": {
        "currentPage": {
          "type": "integer",
          "format": "int32",
          "description": "The current page number. The first page is number zero (0), the second page is number one (1), and so on"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "The number of results per page. A page may have less results if there are less than a full page of results, only on the last page in the results"
        },
        "sort": {
          "type": "string",
          "description": "The selected sort code"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of pages. This is the number of pages, each of pageSize, required to display the totalResults."
        },
        "totalResults": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of matched results across all pages"
        }
      },
      "title": "deprecatedPagination",
      "description": "Representation of a search results pagination"
    },
    "error": {
      "type": "object",
      "properties": {
        "availableStock": {
          "type": "integer",
          "format": "int64"
        },
        "errorCode": {
          "type": "string",
          "description": "Error code"
        },
        "message": {
          "type": "string",
          "description": "Descriptive, human readable error message."
        },
        "productCode": {
          "type": "string"
        },
        "reason": {
          "type": "string",
          "description": "Additional classification specific for each error type e.g. 'noStock'."
        },
        "subject": {
          "type": "string",
          "description": "Identifier of the related object e.g. '1'."
        },
        "subjectType": {
          "type": "string",
          "description": "Type of the object related to the error e.g. 'entry'."
        },
        "type": {
          "type": "string",
          "description": "Type of the error e.g. 'LowStockError'."
        }
      },
      "title": "error",
      "description": "Error message"
    },
    "errorList": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/error",
            "originalRef": "error"
          }
        }
      },
      "title": "errorList",
      "description": "List of errors"
    },
    "pagination": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Number of elements on this page"
        },
        "hasNext": {
          "type": "boolean",
          "description": "Indicates if there is next page"
        },
        "hasPrevious": {
          "type": "boolean",
          "description": "Indicates if there is previous page"
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Current page number"
        },
        "totalCount": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of elements"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of pages"
        }
      },
      "title": "pagination",
      "description": "Pagination info"
    },
    "sort": {
      "type": "object",
      "properties": {
        "asc": {
          "type": "boolean"
        },
        "code": {
          "type": "string"
        }
      },
      "title": "sort",
      "description": "Sort option"
    }
  }
}
